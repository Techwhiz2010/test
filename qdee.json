{"QdeeRGBLight.ts":"/**\n * QdeeRGBLight package\n */\n\nenum QdeeRGBColors {\n    //% block=red\n    Red = 1,\n    //% block=orange\n    Orange = 2,\n    //% block=yellow\n    Yellow = 3,\n    //% block=green\n    Green = 4,\n    //% block=blue\n    Blue = 5,\n    //% block=indigo\n    Indigo = 6,\n    //% block=violet\n    Violet = 7,\n    //% block=purple\n    Purple = 8,\n    //% block=white\n    White = 9\n}\n\n\n enum QdeeLights {\n    //% block=\"Light 1\"\n    Light1 = 0x00,\n    //% block=\"Light 2\"\n    Light2 = 0x01,\n    //% block=\"Light 3\"\n    Light3 = 0x02,\n    //% block=\"Light 4\"\n     Light4 = 0x03,\n    //% block=\"Light 5\"\n     Light5 = 0x04,\n    //% block=\"Light 6\"\n     Light6 = 0x05,\n    //% block=\"All\"\n     All = 0x06\n}\n\nenum QdeeLightsBelt {\n        //% block=\"Light 1\"\n        Light1 = 0x00,\n        //% block=\"Light 2\"\n        Light2 = 0x01,\n        //% block=\"Light 3\"\n        Light3 = 0x02,\n        //% block=\"Light 4\"\n         Light4 = 0x03,\n        //% block=\"Light 5\"\n         Light5 = 0x04,\n        //% block=\"Light 6\"\n        Light6 = 0x05,\n        //% block=\"Light 7\"\n        Light7 = 0x06,\n        //% block=\"Light 8\"\n        Light8 = 0x07,\n        //% block=\"Light 9\"\n        Light9 = 0x08,\n        //% block=\"Light 10\"\n        Light10 = 0x09,\n        //% block=\"All\"\n        All = 0x0A\n}\n\n/**\n * Different modes for RGB or RGB+W RGBLight QbitRGBColors\n */\nenum QdeeRGBPixelMode {\n    //% block=\"RGB (GRB format)\"\n    RGB = 0,\n    //% block=\"RGB+W\"\n    RGBW = 1,\n    //% block=\"RGB (RGB format)\"\n    RGB_RGB = 2\n}\n\n/**\n * QbitRGBLight Functions\n */\nnamespace QdeeRGBLight {\n    //% shim=sendBufferAsm\n    //% parts=\"QbitRGBLight\"\n    function sendBuffer(buf: Buffer, pin: DigitalPin) {\n\n    }\n\n    /**\n    * A LHQbitRGBLight class\n    */\n    export class LHQdeeRGBLight {\n        buf: Buffer;\n        pin: DigitalPin;\n        // TODO: encode as bytes instead of 32bit\n        brightness: number;\n        start: number; // start offset in LED strip\n        _length: number; // number of LEDs\n        _mode: QdeeRGBPixelMode;\n\n        setBrightness(brightness: number): void {\n            this.brightness = brightness & 0xff;\n        }\n\n        setPin(pin: DigitalPin): void {\n            this.pin = pin;\n            pins.digitalWritePin(this.pin, 0);\n            // don't yield to avoid races on initialization\n        }\n\n        setBeltPixelColor(pixeloffset: number, rgb: QdeeRGBColors): void {\n            if (pixeloffset == 10)//全部\n            {\n                for (let i = 0; i < this._length; i++)\n                {\n                    this.setPixelRGB(i, rgb);     \n                }\n            }\n            else\n            {\n                this.setPixelRGB(pixeloffset * 3, rgb);\n                this.setPixelRGB(pixeloffset * 3 + 1, rgb);\n                this.setPixelRGB(pixeloffset*3 + 2, rgb);\n            }\n            \n        }\n        singleSetBeltPixelColor(pixeloffset: number, rgb: QdeeRGBColors): void {\n            this.setPixelRGB(pixeloffset, rgb);\n        }\n\n        setPixelColor(pixeloffset: number, rgb: QdeeRGBColors): void {\n            if (pixeloffset == this._length)//全部\n            {\n                for (let i = 0; i < this._length; i++)\n                {\n                    this.setPixelRGB(i, rgb);     \n                }\n            }\n            else\n            {\n                this.setPixelRGB(pixeloffset, rgb);\n            }\n            \n        }\n\n        setPixelColorRGB(pixeloffset: number, r: number, g: number, b: number): void {\n\n            for (let i = 0; i < this._length; i++) {\n                this.setPixelRGBValue(i, r, g, b);\n            }\n            this.show();\n        }\n\n        private setPixelRGBValue(pixeloffset: number, r: number, g: number, b: number): void {\n            let stride = this._mode === QdeeRGBPixelMode.RGBW ? 4 : 3;\n            pixeloffset = (pixeloffset + this.start) * stride;\n\n            let br = this.brightness;\n            if (br < 255) {\n                r = (r * br) >> 8;\n                g = (g * br) >> 8;\n                b = (b * br) >> 8;\n            }\n            this.setBufferRGB(pixeloffset, r, g, b)\n        }\n        \n        private setPixelRGB(pixeloffset: number, rgb: QdeeRGBColors): void {\n            if (pixeloffset < 0\n                || pixeloffset >= this._length)\n                return;\n            let tureRgb = 0;\n                switch (rgb)\n                {\n                    case QdeeRGBColors.Red:\n                        tureRgb = 0xFF0000;\n                        break;    \n    \n                    case QdeeRGBColors.Orange:\n                        tureRgb = 0xF58517;    \n                        break;    \n    \n                    case QdeeRGBColors.Yellow:\n                        tureRgb = 0xFFFF00;\n                        break;    \n                        \n                    case QdeeRGBColors.Green:\n                        tureRgb = 0x00FF00;    \n                        break;    \n    \n                    case QdeeRGBColors.Blue:\n                        tureRgb = 0x0000FF;\n                        break;    \n                        \n                    case QdeeRGBColors.Indigo:\n                        tureRgb = 0x4b0082;    \n                        break;    \n    \n                    case QdeeRGBColors.Violet:\n                        tureRgb = 0x8a2be2;\n                        break;    \n                        \n                    case QdeeRGBColors.Purple:\n                        tureRgb = 0xFF00FF;    \n                        break;   \n    \n                    case QdeeRGBColors.White:\n                        tureRgb = 0xFFFFFF;    \n                        break;   \n                }\n\n            let stride = this._mode === QdeeRGBPixelMode.RGBW ? 4 : 3;\n            pixeloffset = (pixeloffset + this.start) * stride;\n\n            let red = unpackR(tureRgb);\n            let green = unpackG(tureRgb);\n            let blue = unpackB(tureRgb);\n\n            let br = this.brightness;\n            if (br < 255) {\n                red = (red * br) >> 8;\n                green = (green * br) >> 8;\n                blue = (blue * br) >> 8;\n            }\n            this.setBufferRGB(pixeloffset, red, green, blue)\n        }\n\n        private setBufferRGB(offset: number, red: number, green: number, blue: number): void {\n            if (this._mode === QdeeRGBPixelMode.RGB_RGB) {\n                this.buf[offset + 0] = red;\n                this.buf[offset + 1] = green;\n            } else {\n                this.buf[offset + 0] = green;\n                this.buf[offset + 1] = red;\n            }\n            this.buf[offset + 2] = blue;\n        }\n\n        show() {\n            sendBuffer(this.buf, this.pin);\n        }\n\n        clear(): void {\n            const stride = this._mode === QdeeRGBPixelMode.RGBW ? 4 : 3;\n            this.buf.fill(0, this.start * stride, this._length * stride);\n            this.show();\n        }\n    }\n    export function create(pin: DigitalPin, numleds: number, mode: QdeeRGBPixelMode): LHQdeeRGBLight {\n        let light = new LHQdeeRGBLight();\n        let stride = mode === QdeeRGBPixelMode.RGBW ? 4 : 3;\n        light.buf = pins.createBuffer(numleds * stride);\n        light.start = 0;\n        light._length = numleds;\n        light._mode = mode;\n        light.setBrightness(255);\n        light.setPin(pin);\n        return light;\n    }\n\n    function packRGB(a: number, b: number, c: number): number {\n        return ((a & 0xFF) << 16) | ((b & 0xFF) << 8) | (c & 0xFF);\n    }\n    function unpackR(rgb: number): number {\n        let r = (rgb >> 16) & 0xFF;\n        return r;\n    }\n    function unpackG(rgb: number): number {\n        let g = (rgb >> 8) & 0xFF;\n        return g;\n    }\n    function unpackB(rgb: number): number {\n        let b = (rgb) & 0xFF;\n        return b;\n    }\n}\n","README.md":"# qdee\n\nBlocks for Hiwonder Qdee\n\n## License\n\nMIT\n\n## Supported targets\n\n* for PXT/qdee\n(The metadata above is needed for package search.)\n\n```package\nqdee=github:Hiwonder/Qdee\n```\n\n","_locales/ko/qdee-strings.json":"{\n    \"qdee.qdee_Colors.Red|block\":\"빨강\",\n    \"qdee.qdee_Colors.Green|block\":\"초록\",\n    \"qdee.qdee_Colors.Blue|block\":\"파랑\",\n    \"qdee.qdee_Colors.Black|block\":\"검정\",\n    \"qdee.qdee_Colors.White|block\":\"흰색\",\n    \"qdee.qdee_Colors.None|block\":\"없음\",\n    \"qdee.qdee_RGBValue.Red|block\":\"빨강\",\n    \"qdee.qdee_RGBValue.Green|block\":\"초록\",\n    \"qdee.qdee_RGBValue.Blue|block\":\"파랑\",\n    \"qdee.qdee_RGBValue.pa6|block\":\"PA6\",\n    \"qdee.extPins.pa6|block\":\"PA6\",\n    \"qdee.extPins.pa7|block\":\"PA7\",\n    \"qdee.extPins.pb0|block\":\"PB0\",\n    \"qdee.extPins.pb1|block\":\"PB1\",\n    \"qdee.extPins.pb10|block\":\"PB10\",\n    \"qdee.extPins.pb11|block\":\"PB11\",\n    \"qdee.extPins.pc13|block\":\"PC13\",\n    \"qdee.extPins.S1_OUT_S2_OUT|block\":\"센서1과 센서2가 모두 검정색 선을 벗어나 있을 때\",\n    \"qdee.qdee_lineFollower.S1_OUT_S2_OUT|block\":\" 센서1과 센서2가 모두 검정색 선을 벗어나 있을 때\",\n    \"qdee.qdee_lineFollower.S1_OUT_S2_IN|block\":\"센서2는 검정색 선 위에 있고 센서1은 벗어나 있을 때\",\n    \"qdee.qdee_lineFollower.S1_IN_S2_OUT|block\":\" 센서1은 검정색 선 위에 있고 센서2는 벗어나 있을 때\",\n    \"qdee.qdee_lineFollower.S1_IN_S2_IN|block\":\"센서1과 센서2가 모두 검정색 선 위에 있을 때\",\n    \"qdee.qdee_lineFollower.port4|block\":\"포트4\",\n    \"qdee.colorSensorPort.port4|block\":\"포트4\",\n    \"qdee.colorSensorPort.port9|block\":\"포트9\",\n    \"qdee.colorSensorPort.port1|block\":\"포트1\",\n    \"qdee.fanPort.port1|block\":\"포트1\",\n    \"qdee.fanPort.port2|block\":\"포트2\",\n    \"qdee.fanPort.Servo1|block\":\"서보1\",\n    \"qdee.Servos.Servo1|block\":\"서보1\",\n    \"qdee.Servos.Servo2|block\":\"서보2\",\n    \"qdee.Servos.port1|block\":\"포트1\",\n    \"qdee.ultrasonicPort.port1|block\":\"포트 1\",\n    \"qdee.ultrasonicPort.port2|block\":\"포트2\",\n    \"qdee.lightbeltPort.port1|block\":\"포트1\",\n    \"qdee.lightbeltPort.port2|block\":\"포트2\",\n    \"qdee.lightbeltPort.port3|block\":\"포트3\",\n    \"qdee.lightbeltPort.port10|block\":\"포트10\",\n    \"qdee.busServoPort.port10|block\":\"포트10\",\n    \"qdee.busServoPort.port1|block\":\"포트1\",\n    \"qdee.knobPort.port1|block\":\"포트1\",\n    \"qdee.knobPort.port6|block\":\"포트6\",\n    \"qdee.knobPort.port8|block\":\"포트8\",\n    \"qdee.touchKeyPort.port1|block\":\"포트1\",\n    \"qdee.touchKeyPort.port2|block\":\"포트2\",\n    \"qdee.touchKeyPort.port3|block\":\"포트3\",\n    \"qdee.touchKeyPort.port6|block\":\"포트6\",\n    \"qdee.touchKeyPort.port8|block\":\"포트8\",\n    \"qdee.lineFollowPort.port1|block\":\"포트1\",\n    \"qdee.lineFollowPort.adress_1|block\":\"값1\",\n    \"qdee.extAddress.adress_1|block\":\"값1\",\n    \"qdee.extAddress.adress_2|block\":\"값2\",\n    \"qdee.extAddress.adress_3|block\":\"값3\",\n    \"qdee.extAddress.adress_4|block\":\"값4\",\n    \"qdee.extAddress.adress_5|block\":\"값5\",\n    \"qdee.extAddress.adress_6|block\":\"값6\",\n    \"qdee.extAddress.adress_7|block\":\"값7\",\n    \"qdee.extAddress.adress_8|block\":\"값8\",\n    \"qdee.extAddress.adress_9|block\":\"값9\",\n    \"qdee.extAddress.adress_10|block\":\"값10\",\n    \"qdee.extAddress.LFSensor_1|block\":\"센서 1\",\n    \"qdee.LineFollowerSensor.LFSensor_1|block\":\"센서 1\",\n    \"qdee.LineFollowerSensor.LFSensor_2|block\":\"센서 2\",\n    \"qdee.LineFollowerSensor.CH_MINUS|block\":\"CH-\",\n    \"qdee.IRKEY.CH_MINUS|block\":\"CH-\",\n    \"qdee.IRKEY.CH|block\":\"CH\",\n    \"qdee.IRKEY.CH_ADD|block\":\"CH+\",\n    \"qdee.IRKEY.PREV|block\":\"PREV\",\n    \"qdee.IRKEY.NEXT|block\":\"NEXT\",\n    \"qdee.IRKEY.PLAY_PAUSE|block\":\"PLAY/PAUSE\",\n    \"qdee.IRKEY.ADD|block\":\"+\",\n    \"qdee.IRKEY.MINUS|block\":\"-\",\n    \"qdee.IRKEY.EQ|block\":\"EQ\",\n    \"qdee.IRKEY._100|block\":\"100+\",\n    \"qdee.IRKEY._200|block\":\"200+\",\n    \"qdee.IRKEY.R0|block\":\"R0\",\n    \"qdee.IRKEY.R1|block\":\"R1\",\n    \"qdee.IRKEY.R2|block\":\"R2\",\n    \"qdee.IRKEY.R3|block\":\"R3\",\n    \"qdee.IRKEY.R4|block\":\"R4\",\n    \"qdee.IRKEY.R5|block\":\"R5\",\n    \"qdee.IRKEY.R6|block\":\"R6\",\n    \"qdee.IRKEY.R7|block\":\"R7\",\n    \"qdee.IRKEY.R8|block\":\"R8\",\n    \"qdee.IRKEY.R9|block\":\"R9\",\n    \"qdee.IRKEY.NO_COMMAND|block\":\"실행할 수 없는 명령\",\n    \"qdee.QdeeCmdType.NO_COMMAND|block\":\"실행할 수 없는 명령\",\n    \"qdee.QdeeCmdType.CAR_RUN|block\":\"자동차 주행\",\n    \"qdee.QdeeCmdType.SERVO|block\":\"서보모터\",\n    \"qdee.QdeeCmdType.ULTRASONIC|block\":\"초음파센서 측정 거리\",\n    \"qdee.QdeeCmdType.TEMPERATURE|block\":\"온도\",\n    \"qdee.QdeeCmdType.SOUND|block\":\"소리\",\n    \"qdee.QdeeCmdType.LIGHT|block\":\"빛\",\n    \"qdee.QdeeCmdType.BAT|block\":\"전압\",\n    \"qdee.QdeeCmdType.RGB_LIGHT|block\":\"RGB 빛\",\n    \"qdee.QdeeCmdType.DIDI|block\":\"경적 울리기\",\n    \"qdee.QdeeCmdType.VERSION|block\":\"펌웨어 버전 읽기\",\n    \"qdee.QdeeCmdType.REMOTE|block\":\"원격 조종\",\n    \"qdee.QdeeCmdType.LEARN_CODE|block\":\"코드 배우기\",\n    \"qdee.QdeeCmdType.READ_ANGLE|block\":\"각도 읽기\",\n    \"qdee.QdeeCmdType.RGB_BELT|block\":\"LED 띠\",\n    \"qdee.QdeeCmdType.SOFA|block\":\"Sofa 상태\",\n    \"qdee.QdeeCmdType.GAME|block\":\"게임 데이터\",\n    \"qdee.QdeeCmdType.WIFI_MODE|block\":\"와이파이 모드\",\n    \"qdee.QdeeCmdType.GET_MAC|block\":\"mac 가져오기\",\n    \"qdee.QdeeCmdType.CHANGE_MODE|block\":\"모드 바꾸기\",\n    \"qdee.QdeeCmdType.SHOW_FACE|block\":\"얼굴 나타내기\",\n    \"qdee.QdeeCmdType.PLAY_TONE|block\":\"소리 연주하기\",\n    \"qdee.QdeeCmdType.STOP|block\":\"정지하기\",\n    \"qdee.QdeeCarRunCmdType.STOP|block\":\"정지하기\",\n    \"qdee.QdeeCarRunCmdType.GO_AHEAD|block\":\"앞으로 가기\",\n    \"qdee.QdeeCarRunCmdType.GO_BACK|block\":\"뒤로 가기\",\n    \"qdee.QdeeCarRunCmdType.TURN_LEFT|block\":\"왼쪽으로 회전하기\",\n    \"qdee.QdeeCarRunCmdType.TURN_RIGHT|block\":\"오른쪽으로 회전하기\",\n    \"qdee.QdeeCarRunCmdType.GO_AHEAD_SLOW|block\":\"천천히 앞으로 가기\",\n    \"qdee.QdeeCarRunCmdType.TURN_LEFT_SLOW|block\":\"천천히 왼쪽으로 회전하기\",\n    \"qdee.QdeeCarRunCmdType.TURN_RIGHT_SLOW|block\":\"천천히 오른쪽으로 회전하기\",\n    \"qdee.QdeeCarRunCmdType.COMMAND_ERRO|block\":\"실행할 수 없는 명령\",\n    \"qdee.qdee_Init|block\":\"Qdee 초기화하기\",\n    \"qdee.qdee_init_colorSensor|block\":\"포트 %port 컬러센서 초기화하기\",\n    \"qdee.qdee_belt_initRGBLight|block\":\"포트 %port LED 띠 초기화하기\",\n    \"qdee.qdee_setBusServo|block\":\"버스서보 |포트 %port|인덱스%index|각도(-120~120) %angle|시간(ms) %duration 동안 움직이기\",\n    \"qdee.qdee_setBusServoNum|block\":\"버스서보 번호를 |%port 번|으로 설정하기\",\n    \"qdee.qdee_readAngle|block\":\"|%servo| 각도 읽기\",\n    \"qdee.qdee_setMotorSpeed|block\":\"모터1 속도를 |%speed1| 모터2 속도를 |%speed2|로 정하기\",\n    \"qdee.qdee_fan_speed|block\":\"|포트 %port| 팬를 속도 %speed로 설정하기\",\n    \"qdee.qdee_show_expressions|block\":\"Qdee에 %type 의 표정 나타내기\",\n    \"qdee.onQdee_custom_ir_pressed|block\":\"적외선 신호값 |%address| 코드 %code 를 받았을 때\",\n    \"qdee.qdee_send_ir_data|block\":\"Qdee가 |%adress| 코드 %num 보내게 하기\",\n    \"qdee.onQdee_remote_ir_pressed|block\":\"리모콘 |%code|를 눌렀을 때\",\n    \"qdee.onQdee_remote_ir_longpressed|block\":\"리모콘 |%code|를 오래 눌렀을 때\",\n    \"qdee.onQdee_remote_no_ir|block\":\"리모콘 멈춤 신호를 받았을 때\",\n    \"qdee.qdee_send_remote_data|block\":\"Qdee가 적외선 신호 |신호 %irKey|를 보내기\",\n    \"qdee.qdee_send_remote_phone_data|block\":\"Qdee가 적외선 리모콘 정보 |키 %data| 보내기\",\n    \"qdee.qdee_ir_learn_mode|block\":\"적외선 학습 모드,코드 번호(1~10) %num|로 정하기\",\n    \"qdee.qdee_send_learn_data|block\":\"Qdee가 적외선 학습 코드,|번호(1~10) %num| 보내기\",\n    \"qdee.qdee_getSoundVolume|block\":\"소리 크기\",\n    \"qdee.qdee_getBatVoltage|block\":\"Qdee의 현재 전압 값(mV) 가져오기\",\n    \"qdee.qdee_checkCurrentColor|block\":\"현재 색상 %color\",\n    \"qdee.qdee_get_color|block\":\"색상 %color 값(0~255)\",\n    \"qdee.qdee_readLineFollowerStatus|block\":\"선 따라가기 상태 |포트 %port|%status\",\n    \"qdee.qdee_lineSensorValue|block\":\"라인 트레이싱 센서 |포트 %port|%sensor|값 가져오기\",\n    \"qdee.qdee_touchButton|block\":\" 터치버튼|포트 %port|가 눌렸을 때\",\n    \"qdee.qdee_ultrasonic|block\":\"|포트 %port| 초음파 센서 측정거리(cm)\",\n    \"qdee.qdee_getKnobValue|block\":\"|포트 %port| 손잡이 값(0~255)\",\n    \"qdee.qdee_analyzeBluetoothCmd|block\":\"블루투스 명령 종류 %str 가져오기\",\n    \"qdee.qdee_getArgs|block\":\"|%str|형태 명령을 %index 에 받기\",\n    \"qdee.qdee_getBluetoothCmdtype|block\":\"블루투스 명령 종류 %type\",\n    \"qdee.qdee_getRunCarType|block\":\"자동차 주행 모드 %type\",\n    \"qdee.qdee_convertUltrasonic|block\":\"초음파 센서 측정 %data 변환하기\",\n    \"qdee.qdee_convertTemperature|block\":\"온도 %data 변환하기\",\n    \"qdee.qdee_convertSound|block\":\"소리 %data 변환하기\",\n    \"qdee.qdee_convertLight|block\":\"빛 %data 변환하기\",\n    \"qdee.qdee_convertBattery|block\":\"배터리 %data 변환하기\",\n    \"qdee.qdee_setBrightness|block\":\"밝기를 %brightness 로 설정하기\",\n    \"qdee.qdee_setPixelRGB|block\":\"|%lightoffset|색상을 %rgb 로 정하기\",\n    \"qdee.qdee_setPixelRGBArgs|block\":\" |%lightoffset| 색상을  %rgb로 정하기\",\n    \"qdee.qdee_showLight|block\":\"빛 켜기\",\n    \"qdee.qdee_clearLight|block\":\"빛 끄기\",\n    \"qdee.qdee_belt_setPixelRGB|block\":\"LED 띠 |%lightoffset|색상을 %rgb 로 정하기\",\n    \"qdee.qdee_belt_setPixelRGBIndex|block\":\"LED 띠 |%lightoffset|색상을 %rgb(1~9)로 정하기\",\n    \"qdee.qdee_belt_setPixelRGBSingle|block\":\"LED 띠 인덱스(0~29)|%lightoffset|색상을 %rgb 로 정하기\",\n    \"qdee.qdee_belt_setPixelRGBSingleRGBIndex|block\":\"LED 띠 인덱스(0~29)|%lightoffset|색상을 %rgb(1~9)로 정하기\",\n    \"qdee.qdee_belt_showLight|block\":\"LED 띠 켜기\",\n    \"qdee.qdee_belt_clearLight|block\":\"LED 띠 끄기\"\n}","_locales/zh/qdee-jsdoc-strings.json":"{\n\t\"qdee.qdee_Init\":\"Qdee板初始化，请在开机时执行\",\n\t\"qdee.qdee_setBusServo\": \"设置总线舵机运行，角度范围-120~120\",\n\t\"qdee.qdee_setMotorSpeed\":\"设置马达1和马达2的速度，速度范围-100到100，可控制坦克车行进和转弯\",\n\t\"qdee.onQdee_custom_ir_pressed\":\"红外检测到指定的用户自定义的码值时触发\",\n\t\"qdee.onQdee_remote_ir_pressed\":\"红外检测到指定的遥控器按键按下时触发\",\n\t\"qdee.qdee_getSoundVolume\":\"获取声音传感器检测到的音量等级，范围0到255\",\n\t\"qdee.qdee_getBatVoltage\":\"获取当前供电电压，单位是mV\",\n\t\"qdee.qdee_ext_output\":\"设置扩展口输出高低电平\",\n\t\"qdee.qdee_ext_io_status\":\"检测卡扩展口的高低电平状态\",\n\t\"qdee.qdee_ir_learn_mode\":\"设置Qdee进入红外学习模式，码编号范围1到10\",\n\t\"qdee.qdee_send_ir_data\":\"发送自定义红外码\",\n\t\"qdee.qdee_send_learn_data\":\"发送红外学习码，码编号范围1到10\",\n\t\"qdee.qdee_send_remote_data\":\"发送红外遥控器码\",\n\t\"qdee.qdee_setBrightness\":\"设置光的强度，一定要在显示灯光之前设置，这样才起到效果，范围0到255\",\n\t\"qdee.qdee_setPixelRGB\":\"设置彩灯颜色，设置完成后请执行显示彩灯操作\",\n\t\"qdee.qdee_setPixelRGBArgs\":\"设置彩灯颜色，参数是颜色的索引，红色,橙色,黄色,绿色,蓝色,靛蓝色,紫罗兰色,紫色,白色对应1到9\",\n\t\"qdee.qdee_showLight\":\"显示彩灯，和设置彩灯颜色配合使用，设置完彩灯颜色后必须执行显示彩灯完成显示\",\n\t\"qdee.qdee_clearLight\":\"清除彩灯颜色，关闭彩灯\",\n\t\"qdee.qdee_analyzeBluetoothCmd\":\"解析手机APP发送的蓝牙命令类型，一共有9种命令类型：行进命令，舵机调试命令(预留)，获取超声波距离命令，获取温度命令，获取声音大小等级命令，获取光线等级命令，设置彩灯颜色命令，电池电量，鸣笛命令，固件版本信息命令\",\n\t\"qdee.qdee_getArgs\":\"解析手机App发送的命令参数，舵机调试命令有3个参数，其余都只有一个参数\",\n\t\"qdee.qdee_getBluetoothCmdtype\":\"枚举蓝牙命令类型\",\n\t\"qdee.qdee_getRunCarType\":\"获取坦克车行进命令类型，有停止、前进、后退、左转、右转、慢速前进，慢速左转，慢速右转\",\n\t\"qdee.qdee_convertTemperature\":\"转换温度值为标准命令，发送到手机端，APP会显示当前温度\",\n\t\"qdee.qdee_convertLight\":\"转换光线值为标准命令，发送到手机端，APP会显示当前光线等级(0~255)\",\n\t\"qdee.qdee_convertBattery\":\"转换电压值，发送到手机端，APP会显示当前电压\",\n\t\"qdee.qdee_init_colorSensor\":\"初始化颜色传感器，请在程序启动时执行\",\n\t\"qdee.qdee_checkCurrentColor\":\"可以获得颜色传感器检测到颜色\",\n\t\"qdee.qdee_fan_speed\":\"控制风扇旋转\",\n\t\"qdee.qdee_readLineFollowerStatus\":\"获得巡线传感器状态\",\n\t\"qdee.qdee_touchButton\":\"检测触摸按键是否有按下，有按下返回1，没有按下返回0\",\n\t\"qdee.qdee_ultrasonic\":\"获得超声波模块测试到的障碍物的距离\",\n\t\"qdee.qdee_getKnobValue\":\"获取旋钮的ad值\",\n\t\"qdee.qdee_lineSensorValue\":\"获取巡线传感器的ad值\",\n\t\"qdee.qdee_readAngle\":\"Microbit向单片机发送查询单片机指令\",\n\t\"qdee.qdee_setBusServoNum\":\"发送指令来设置当前连接的总线舵机的编号\",\n\t\"qdee.qdee_belt_setPixelRGBSingle\":\"设置灯带30个灯的颜色，灯编号参数范围为0到29\",\n\t\"qdee.qdee_belt_setPixelRGBSingleRGBIndex\":\"设置灯带30个灯的颜色，灯编号参数范围为0到29，颜色编号范围为1到9\"\n}\n","_locales/zh/qdee-strings.json":"{\n\t\"qdee.qdee_Init|block\": \"初始化Qdee\",\n\t\"qdee.qdee_setBusServo|block\": \"设置总线舵机|%port|编号 %index|角度(-120~120) %angle|运行时间(ms) %duration\",\n\t\"qdee.qdee_setMotorSpeed|block\": \"设置电机1速度(-100~100)|%speed1|和电机2|速度 %speed2\",\n\t\"qdee.qdee_getSoundVolume|block\": \"音量值\",\n\t\"qdee.qdee_getBatVoltage|block\":\"电量值(mV)\",\n\t\"qdee.extAddress.adress_1|block\":\"地址1\",\n\t\"qdee.extAddress.adress_2|block\":\"地址2\",\n\t\"qdee.extAddress.adress_3|block\":\"地址3\",\n\t\"qdee.extAddress.adress_4|block\":\"地址4\",\n\t\"qdee.extAddress.adress_5|block\":\"地址5\",\n\t\"qdee.extAddress.adress_6|block\":\"地址6\",\n\t\"qdee.extAddress.adress_7|block\":\"地址7\",\n\t\"qdee.extAddress.adress_8|block\":\"地址8\",\n\t\"qdee.extAddress.adress_9|block\":\"地址9\",\n\t\"qdee.extAddress.adress_10|block\":\"地址10\",\n\t\"qdee.onQdee_custom_ir_pressed|block\":\"当红外接收到自定义码|地址%address|码值%code|时\",\n\t\"qdee.onQdee_remote_ir_pressed|block\":\"当红外接收到遥控器码|%code|时\",\n\t\"qdee.qdee_setBusServoNum|block\":\"设置总线舵机|编号 %port|\",\n\t\"QdeeLights.Light1|block\":\"彩灯1\",\n\t\"QdeeLights.Light2|block\":\"彩灯2\",\n\t\"QdeeLights.Light3|block\":\"彩灯3\",\n\t\"QdeeLights.Light4|block\":\"彩灯4\",\n\t\"QdeeLights.Light5|block\":\"彩灯5\",\n\t\"QdeeLights.Light6|block\":\"彩灯6\",\n\t\"QdeeLights.All|block\":\"全部\",\n\t\"QdeeLightsBelt.Light1|block\":\"灯段1\",\n\t\"QdeeLightsBelt.Light2|block\":\"灯段2\",\n\t\"QdeeLightsBelt.Light3|block\":\"灯段3\",\n\t\"QdeeLightsBelt.Light4|block\":\"灯段4\",\n\t\"QdeeLightsBelt.Light5|block\":\"灯段5\",\n\t\"QdeeLightsBelt.Light6|block\":\"灯段6\",\n\t\"QdeeLightsBelt.Light7|block\":\"灯段7\",\n\t\"QdeeLightsBelt.Light8|block\":\"灯段8\",\n\t\"QdeeLightsBelt.Light9|block\":\"灯段9\",\n\t\"QdeeLightsBelt.Light10|block\":\"灯段10\",\n\t\"QdeeLightsBelt.All|block\":\"全部\",\n\t\"qdee.qdee_setPixelRGB|block\":\"设置|%lightoffset|颜色为 %rgb\",\n\t\"qdee.qdee_setPixelRGBArgs|block\":\"设置|%lightoffset|颜色为 %rgb\",\n\t\"qdee.qdee_showLight|block\":\"显示彩灯\",\n\t\"qdee.qdee_clearLight|block\":\"关闭彩灯\",\n\t\"qdee.qdee_setBrightness|block\":\"设置RGB灯亮度 %brightness\",\n\t\"qdee.setqdeeRun|block\":\"设置qdee %runType\",\n\t\"qdee.qdee_Colors.Red|block\":\"红色\",\n\t\"qdee.qdee_Colors.Green|block\":\"绿色\",\n\t\"qdee.qdee_Colors.Blue|block\":\"蓝色\",\n\t\"qdee.qdee_Colors.White|block\":\"白色\",\n\t\"qdee.qdee_Colors.Black|block\":\"黑色\",\n\t\"qdee.qdee_RGBValue.Red|block\":\"红色\",\n\t\"qdee.qdee_RGBValue.Green|block\":\"绿色\",\n\t\"qdee.qdee_RGBValue.Blue|block\":\"蓝色\",\t\n\t\"QdeeRGBColors.Red|block\":\"红色\",\n\t\"QdeeRGBColors.Orange|block\":\"橙色\",\n\t\"QdeeRGBColors.Yellow|block\":\"黄色\",\n\t\"QdeeRGBColors.Green|block\":\"绿色\",\n\t\"QdeeRGBColors.Blue|block\":\"蓝色\",\n\t\"QdeeRGBColors.Indigo|block\":\"靛蓝色\",\n\t\"QdeeRGBColors.Violet|block\":\"紫罗兰色\",\n\t\"QdeeRGBColors.Purple|block\":\"紫色\",\n\t\"QdeeRGBColors.White|block\":\"白色\",\n\t\"qdee.qdee_analyzeBluetoothCmd|block\":\"获取蓝牙命令类型 %str\",\n\t\"qdee.qdee_getArgs|block\":\"获取蓝牙命令|%str|参数 %index\",\n\t\"qdee.qdee_getBluetoothCmdtype|block\":\"蓝牙命令类型 %type\",\n\t\"qdee.qdee_getRunCarType|block\":\"车辆行进命令类型 %type\",\n\t\"qdee.QdeeCmdType.NO_COMMAND|block\":\"无效的命令\",\n\t\"qdee.QdeeCmdType.CAR_RUN|block\":\"车辆行进命令\",\n\t\"qdee.QdeeCmdType.SERVO|block\":\"舵机控制命令\",\n\t\"qdee.QdeeCmdType.ULTRASONIC|block\":\"超声波距离查询命令\",\n\t\"qdee.QdeeCmdType.TEMPERATURE|block\":\"温度查询命令\",\n\t\"qdee.QdeeCmdType.SOUND|block\":\"声音查询命令\",\n\t\"qdee.QdeeCmdType.LIGHT|block\":\"光线查询命令\",\n\t\"qdee.QdeeCmdType.BATTERY|block\":\"电量查询命令\",\n\t\"qdee.QdeeCmdType.RGB_LIGHT|block\":\"彩灯控制命令\",\n\t\"qdee.QdeeCmdType.BAT|block\":\"电量命令\",\n\t\"qdee.QdeeCmdType.DIDI|block\":\"鸣笛命令\",\n\t\"qdee.QdeeCmdType.VERSION|block\":\"读取固件信息命令\",\n\t\"qdee.QdeeCmdType.REMOTE|block\":\"遥控器码\",\n\t\"qdee.QdeeCmdType.LEARN_CODE|block\":\"学习码\",\n\t\"qdee.QdeeCmdType.READ_ANGLE|block\":\"回读角度\",\n\t\"qdee.QdeeCmdType.RGB_BELT|block\":\"控制灯带\",\n\t\"qdee.QdeeCmdType.SOFA|block\":\"沙发状态\",\n\t\"qdee.QdeeCmdType.GAME|block\":\"游戏\",\n\t\"qdee.QdeeCmdType.WIFI_MODE|block\":\"Wifi模式\",\n\t\"qdee.QdeeCmdType.GET_MAC|block\":\"配对请求\",\n\t\"qdee.QdeeCmdType.CHANGE_MODE|block\":\"切换工作模式\",\n\t\"qdee.QdeeCmdType.SHOW_FACE|block\":\"显示表情\",\n\t\"qdee.QdeeCmdType.PLAY_TONE|block\":\"播放音调\",\n\t\"qdee.QdeeCarRunCmdType.STOP|block\":\"停止\",\n\t\"qdee.QdeeCarRunCmdType.GO_AHEAD|block\":\"前进\",\n\t\"qdee.QdeeCarRunCmdType.GO_BACK|block\":\"后退\",\n\t\"qdee.QdeeCarRunCmdType.TURN_LEFT|block\":\"左转\",\n\t\"qdee.QdeeCarRunCmdType.TURN_RIGHT|block\":\"右转\",\n\t\"qdee.QdeeCarRunCmdType.GO_AHEAD_SLOW|block\":\"慢速前进\",\n\t\"qdee.QdeeCarRunCmdType.TURN_LEFT_SLOW|block\":\"慢速左转\",\n\t\"qdee.QdeeCarRunCmdType.TURN_RIGHT_SLOW|block\":\"慢速右转\",\n\t\"qdee.QdeeCarRunCmdType.COMMAND_ERRO|block\":\"无效的命令\",\n\t\"qdee.qdee_convertTemperature|block\":\"转换温度命令 %data\",\n\t\"qdee.qdee_convertUltrasonic|block\":\"转换超声波命令 %data\",\n\t\"qdee.qdee_convertSound|block\":\"转换声音命令 %data\",\n\t\"qdee.qdee_convertLight|block\":\"转换光线命令 %data\",\n\t\"qdee.qdee_convertBattery|block\":\"转换电量命令 %data\",\n\t\"qdee.qdee_ext_output|block\":\"设置扩展口|管脚 %pin|%out\",\n\t\"qdee.qdee_ext_io_status|block\":\"扩展口状态 %pin\",\n\t\"qdee.qdee_ir_learn_mode|block\":\"设置Qdee红外进入学习模式,学习码编号(1~10) %num\",\n\t\"qdee.qdee_send_ir_data|block\":\"Qdee发送红外自定义码|地址 %address|码值 %num\",\n\t\"qdee.qdee_send_learn_data|block\":\"Qdee发送红外学习码,学习码编号 %num\",\n\t\"qdee.qdee_send_remote_data|block\":\"Qdee发送遥控器码|按键 %irKey|\",\n\t\"qdee.qdee_lineFollower.S1_IN_S2_IN|block\":\"传感器1和传感器2在黑线内\",\n\t\"qdee.qdee_lineFollower.S1_IN_S2_OUT|block\":\"传感器1在黑线内，传感器2在黑线外\",\n\t\"qdee.qdee_lineFollower.S1_OUT_S2_IN|block\":\"传感器1在黑线外，传感器2在黑线内\",\n\t\"qdee.qdee_lineFollower.S1_OUT_S2_OUT|block\":\"传感器1和传感器2在黑线外\",\n\t\"qdee.colorSensorPort.port4|block\":\"接口4\",\n\t\"qdee.colorSensorPort.port9|block\":\"接口9\",\n\t\"qdee.fanPort.port1|block\":\"接口1\",\n\t\"qdee.fanPort.port2|block\":\"接口2\",\n\t\"qdee.busServoPort.port10|block\":\"接口10\",\n\t\"qdee.ultrasonicPort.port1|block\":\"接口1\",\n\t\"qdee.ultrasonicPort.port2|block\":\"接口2\",\n\t\"qdee.lightbeltPort.port1|block\":\"接口1\",\n\t\"qdee.lightbeltPort.port2|block\":\"接口2\",\n\t\"qdee.lightbeltPort.port3|block\":\"接口3\",\n\t\"qdee.qdee_init_colorSensor|block\":\"初始化颜色传感器 %port\",\n\t\"qdee.qdee_checkCurrentColor|block\":\"检测到颜色 %color\",\n\t\"qdee.qdee_get_color|block\":\"颜色 %color 值(0~255)\",\n\t\"qdee.qdee_fan_speed|block\":\"设置风扇|%port|速度 %speed\",\n\t\"qdee.qdee_readLineFollowerStatus|block\":\"巡线传感器|%port|%status\",\n\t\"qdee.qdee_ultrasonic|block\":\"超声波模块|%port|测试到障碍物距离(Cm)\",\n\t\"qdee.knobPort.port1|block\":\"接口1\",\n\t\"qdee.knobPort.port6|block\":\"接口6\",\n\t\"qdee.knobPort.port8|block\":\"接口8\",\n\t\"qdee.qdee_getKnobValue|block\":\"旋钮|%port|ad值(0~255)\",\n\t\"qdee.touchKeyPort.port1|block\":\"接口1\",\n\t\"qdee.touchKeyPort.port2|block\":\"接口2\",\n\t\"qdee.touchKeyPort.port3|block\":\"接口3\",\n\t\"qdee.touchKeyPort.port6|block\":\"接口6\",\n\t\"qdee.touchKeyPort.port8|block\":\"接口8\",\n\t\"qdee.qdee_touchButton|block\":\"触摸按钮|%port|被按下\",\n\t\"qdee.qdee_lineSensorValue|block\":\"获取巡线传感器|%port|%sensor|的ad值\",\n\t\"qdee.LineFollowerSensor.LFSensor_1|block\":\"巡线传感器1\",\n\t\"qdee.LineFollowerSensor.LFSensor_2|block\":\"巡线传感器2\",\n\t\"qdee.lineFollowPort.port1|block\":\"接口1\",\n\t\"qdee.lineFollowPort.port6|block\":\"接口6\",\n\t\"qdee.lineFollowPort.port8|block\":\"接口8\",\n\t\"qdee.qdee_belt_initRGBLight|block\":\"初始化灯带端口 %port\",\n\t\"qdee.qdee_belt_setPixelRGB|block\":\"设置灯带|%lightoffset|段颜色 %rgb\",\n\t\"qdee.qdee_belt_showLight|block\":\"显示灯带\",\n\t\"qdee.qdee_belt_clearLight|block\":\"关闭灯带\",\n\t\"qdee.Servos.Servo1|block\":\"舵机1\",\n\t\"qdee.Servos.Servo2|block\":\"舵机2\",\n\t\"qdee.qdee_readAngle|block\":\"读|%servo|角度命令\",\n\t\"qdee.getServosAngle|block\":\"获取|%servo|角度(-120~120)\",\n\t\"qdee.onQdee_getAngle|block\":\"当读取到|%servo|角度时执行\",\n\t\"qdee.qdee_show_expressions|block\":\"Qdee显示表情 %type\",\n\t\"qdee.qdee_playTone|block\":\"Qdee播放音调|%tone|,|%rhythm 拍\",\n\t\"qdee.qdee_belt_setPixelRGBIndex|block\":\"设置灯带|%lightoffset|段颜色为 %rgb\",\n\t\"qdee.qdee_send_remote_phone_data|block\":\"Qdee发送手机遥控码 %data\",\n\t\"qdee.qdee_belt_setPixelRGBSingle|block\":\"设置灯带灯索引(0~29)|%lightoffset|颜色 %rgb(1~9)\",\n\t\"qdee.qdee_belt_setPixelRGBSingleRGBIndex|block\":\"设置灯带索引(0~29)|%lightoffset|颜色编号 %rgb(1~9)\",\n\t\"qdee.onQdee_remote_ir_longpressed|block\":\"当遥控器|%code|按键长按\",\n\t\"qdee.onQdee_remote_no_ir|block\":\"当遥控器停止按下\"\n}\n","main.ts":"/*\n qdee package\n*/\n//% weight=10 icon=\"\\uf013\" color=#2896ff\nnamespace qdee {\n\n    export enum qdee_Colors {\n        //% block=\"Red\"\n        Red = 0x01,\n        //% block=\"Green\"\n        Green = 0x02,\n        //% block=\"Blue\"\n        Blue = 0x03,\n        //% block=\"Black\"\n        Black = 0x04,\n        //% block=\"White\"\n        White = 0x05,\n        //% block=\"None\"\n        None = 0x06\n    }\n\n    export enum qdee_RGBValue {\n        //% block=\"Red\"\n        Red = 0x01,\n        //% block=\"Green\"\n        Green = 0x02,\n        //% block=\"Blue\"\n        Blue = 0x03  \n    }\n\n    export enum extPins {\n        //% block=\"PA6\"\n        pa6 = 0x06,\n        //% block=\"PA7\"\n        pa7 = 0x07,\n        //% block=\"PB0\"\n        pb0 = 0x10,\n        //% block=\"PB1\"\n        pb1 = 0x11,\n        //% block=\"PB10\"        \n        pb10 = 0x1a,\n        //% block=\"PB11\"\n        pb11 = 0x11,\n        //% block=\"PC13\"\n        pc13 = 0x23\n    }\n\n    export enum qdee_lineFollower {\n        //% blockId=\"S1_OUT_S2_OUT\" block=\"Sensor1 and sensor2 are out black line\"\n        S1_OUT_S2_OUT = 0x00,\n        //% blockId=\"S1_OUT_S2_IN\" block=\"Sensor2 in black line but sensor1 not\"\n        S1_OUT_S2_IN = 0x01,\n        //% blockId=\"S1_IN_S2_OUT\" block=\"Sensor1 in black line but sensor2 not\"\n        S1_IN_S2_OUT = 0x02,\n        //% blockId=\"S1_IN_S2_IN\" block=\"Sensor1 and sensor2 are in black line \"\n        S1_IN_S2_IN = 0x03\n    }\n\n    export enum colorSensorPort {\n        //% block=\"Port 4\"\n        port4 = 0x04,\n        //% block=\"Port 9\"\n        port9 = 0x09\n    }\n\n    export enum fanPort {\n        //% block=\"Port 1\"\n        port1 = 0x01,\n        //% block=\"Port 2\"\n        port2 = 0x02,\n    }\n\n    export enum Servos {\n        //% block=\"servo 1\"\n        Servo1 = 0x01,\n        //% block=\"servo 2\"\n        Servo2 = 0x02\n    }\n\n    export enum ultrasonicPort {\n        //% block=\"Port 1\"\n        port1 = 0x01,\n        //% block=\"Port 2\"\n        port2 = 0x02\n    }\n\n    export enum lightbeltPort {\n        //% block=\"Port 1\"\n        port1 = 0x01,\n        //% block=\"Port 2\"\n        port2 = 0x02,\n        //% block=\"Port 3\"\n        port3 = 0x03\n    }\n\n    export enum busServoPort {\n        //% block=\"Port 10\"\n        port10 = 0x0A\n    }\n\n    export enum knobPort {\n        //% block=\"Port 1\"\n        port1 = 0x01,\n        //% block=\"Port 6\"\n        port6 = 0x06,\n        //% block=\"Port 8\"\n        port8 = 0x08\n    }\n\n    export enum touchKeyPort {\n        //% block=\"Port 1\"\n        port1 = 0x01,\n        //% block=\"Port 2\"\n        port2 = 0x02,\n        //% block=\"Port 3\"\n        port3 = 0x03,\n        //% block=\"Port 6\"\n        port6 = 0x06,\n        //% block=\"Port 8\"\n        port8 = 0x08\n    }\n\n    export enum lineFollowPort {\n        //% block=\"Port 1\"\n        port1 = 0x01\n    }\n\n    export enum extAddress {\n        //% block=\"address 1\"\n        adress_1 = 0xFE,\n        //% block=\"address 2\"\n        adress_2 = 0xFD,\n        //% block=\"address 3\"\n        adress_3 = 0xFC,\n        //% block=\"address 4\"\n        adress_4 = 0xFB,\n        //% block=\"address 5\"\n        adress_5 = 0xFA,\n        //% block=\"address 6\"\n        adress_6 = 0xF9,\n        //% block=\"address 7\"\n        adress_7 = 0xF8,\n        //% block=\"address 8\"\n        adress_8 = 0xF7,\n        //% block=\"address 9\"\n        adress_9 = 0xF6,\n        //% block=\"address 10\"\n        adress_10 = 0xF5\n    }\n\n\n    export enum LineFollowerSensor {\n        //% block=\"Sensor 1\"\n        LFSensor_1 = 0x00,\n        //% block=\"Sensor 2\"\n        LFSensor_2 = 0x01\n    }\n\n    export enum IRKEY {\n        //% block=\"CH-\"\n        CH_MINUS = 162,\n        //% block=\"CH\"\n        CH = 98,\n        //% block=\"CH+\"\n        CH_ADD = 226,\n        //% block=\"PREV\"\n        PREV = 34,\n        //% block=\"NEXT\"\n        NEXT = 2,\n        //% block=\"PLAY/PAUSE\"\n        PLAY_PAUSE = 194,\n        //% block=\"+\"\n        ADD = 168,\n        //% block=\"-\"\n        MINUS = 224,\n        //% block=\"EQ\"\n        EQ = 144,\n        //% block=\"100+\"\n        _100 = 152,\n        //% block=\"200+\"\n        _200 = 176,\n        //% block=\"R0\"\n        R0 = 104,\n        //% block=\"R1\"\n        R1 = 48,\n        //% block=\"R2\"\n        R2 = 24,\n        //% block=\"R3\"\n        R3 = 122,\n        //% block=\"R4\"\n        R4 = 16,\n        //% block=\"R5\"\n        R5 = 56,\n        //% block=\"R6\"\n        R6 = 90,\n        //% block=\"R7\"\n        R7 = 66,\n        //% block=\"R8\"     \n        R8 = 74,\n        //% block=\"R9\"\n        R9 = 82\n    }\n\n    export enum QdeeCmdType {\n        //% block=\"Invalid command\"\n        NO_COMMAND = 0,\n        //% block=\"car run\"\n        CAR_RUN = 1,\n        //% block=\"Servo\"\n        SERVO = 2,\n        //% block=\"Ultrasonic distance\"\n        ULTRASONIC = 3,\n        //% block=\"Temperature\"\n        TEMPERATURE = 4,\n        //% block=\"Sound\"\n        SOUND = 5,\n        //% block=\"Light\"\n        LIGHT = 6,\n        //% block=\"Voltage\"\n        BAT = 7,\n        //% block=\"Rgb light\"\n        RGB_LIGHT = 8,\n        //% block=\"Honk horn\"\n        DIDI = 9,\n        //% block=\"Read firmware version\"\n        VERSION = 10,\n        //% block=\"Remote control\"\n        REMOTE = 11,\n        //% block=\"Learn code\"\n        LEARN_CODE = 12,\n        //% block=\"Read angle\"\n        READ_ANGLE = 13,\n        //% block=\"Light belt\"\n        RGB_BELT = 14,\n        //% block=\"Sofa status\"\n        SOFA = 15,\n        //% block=\"Game data\"\n        GAME = 16,\n        //% block=\"WIFI mode\"\n        WIFI_MODE = 17,\n        //% block=\"Get mac\"\n        GET_MAC = 18,\n        //% block=\"Change mode\"\n        CHANGE_MODE = 19,\n        //% block=\"Show face\"\n        SHOW_FACE = 20,\n        //% block=\"Play tone\"\n        PLAY_TONE = 21\n    }\n\n    export enum QdeeCarRunCmdType {\n        //% block=\"Stop\"\n        STOP = 0,\n        //% block=\"Go ahead\"\n        GO_AHEAD,\n        //% block=\"Back\"\n        GO_BACK,\n        //% block=\"Turn left\"\n        TURN_LEFT,\n        //% block=\"Turn right\"\n        TURN_RIGHT,\n        //% block=\"Go ahead slowly\"\n        GO_AHEAD_SLOW,\n        //% block=\"Turn left slowly\"\n        TURN_LEFT_SLOW,\n        //% block=\"Turn right slowly\"\n        TURN_RIGHT_SLOW,\n        //% block=\"Invalid command\"\n        COMMAND_ERRO\n    }\n\n    let versionNum: number = -1;//-1为未定义\n    let readTimes: number = 0;\n\n    /**\n     * Qdee initialization, please execute at boot time\n    */\n    //% weight=100 blockId=qdee_Init block=\"Initialize Qdee\"\n    //% subcategory=Init\n    export function qdee_Init() {\n        qdee_initRGBLight();\n        serial.redirect(\n            SerialPin.P12,\n            SerialPin.P8,\n            BaudRate.BaudRate115200);\n\n        basic.forever(() => {\n            getHandleCmd();\n        });\n        while (readTimes < 10 && versionNum == -1) {\n            readTimes++;\n            sendVersionCmd();\n            basic.pause(30)\n        }\n        basic.pause(1500);\n        initExtPins();\n    }\n\n    /**\n     * Initialize the color sensor,please execute at boot time\n     */\n    //% weight=99 blockId=qdee_init_colorSensor block=\"Initialize color sensor port at %port\"\n    //% subcategory=Init\n    export function qdee_init_colorSensor(port: colorSensorPort) {\n        InitColor();\n        enableLightSensor(true);\n        control.waitMicros(100);\n    }\n   \n    /**\n\t * Initialize Light belt\n\t */\n    //% weight=98 blockId=qdee_belt_initRGBLight block=\"Initialize light belt at port %port\"\n    //% subcategory=Init\n    export function qdee_belt_initRGBLight(port: lightbeltPort) {\n        switch (port) {\n            case lightbeltPort.port1:\n                if (!lhRGBLightBelt) {\n                    lhRGBLightBelt = QdeeRGBLight.create(DigitalPin.P1, 30, QdeeRGBPixelMode.RGB);\n                }\n                break;\n            case lightbeltPort.port2:\n                if (!lhRGBLightBelt) {\n                    lhRGBLightBelt = QdeeRGBLight.create(DigitalPin.P13, 30, QdeeRGBPixelMode.RGB);\n                }\n                break;\n            case lightbeltPort.port3:\n                if (!lhRGBLightBelt) {\n                    lhRGBLightBelt = QdeeRGBLight.create(DigitalPin.P16, 30, QdeeRGBPixelMode.RGB);\n                }\n                break;\n        }\n        qdee_clearLight();\n    }\n\n    function sendVersionCmd() {\n        let buf = pins.createBuffer(4);\n        buf[0] = 0x55;\n        buf[1] = 0x55;\n        buf[2] = 0x02;\n        buf[3] = 0x12;//cmd type\n        serial.writeBuffer(buf);\n    }\n\n    function initExtPins() {\n        let buf = pins.createBuffer(6);\n        buf[0] = 0x55;\n        buf[1] = 0x55;\n        buf[2] = 0x04;\n        buf[3] = 0x3E;//cmd type\n        buf[4] = 0x01;\n        buf[5] = 0x00;\n        serial.writeBuffer(buf);\n    }\n\n    let handleCmd: string = \"\";\n    let currentVoltage: number = 0;\n    let volume: number = 0;\n    let lhRGBLight: QdeeRGBLight.LHQdeeRGBLight;\n    let lhRGBLightBelt: QdeeRGBLight.LHQdeeRGBLight;\n\n    let PA6 = 2;\n    let PA7 = 2;\n    let PB0 = 2;\n    let PB1 = 2;\n    let PB10 = 2;\n    let PB11 = 2;\n    let PC13 = 2;\n\n    let PA6_ad = 0;\n    let PA7_ad = 0;\n    let PB0_ad = 0;\n    let PB1_ad = 0;\n\n    let MESSAGE_HEAD = 0xff;\n    let MESSAGE_IOT_HEAD = 0x102;\n\n    let servo1Angle: number = 0xfff;\n    let servo2Angle: number = 0xfff;\n\n    let MESSAGE_HEAD_LONG: number = 0x100;\n    let MESSAGE_HEAD_STOP: number = 0x101;\n\n    let cntIr = 0;\n    let adress = 0;\n    let sendFlag = false;\n    /**\n    * Get the handle command.\n    */\n    function getHandleCmd() {\n        let charStr: string = serial.readString();\n        handleCmd = handleCmd.concat(charStr);\n        let cnt: number = countChar(handleCmd, \"$\");\n        if (cnt == 0)\n            return;\n        let index = findIndexof(handleCmd, \"$\", 0);\n        if (index != -1) {\n            let cmd: string = handleCmd.substr(0, index);\n            if (cmd.charAt(0).compare(\"A\") == 0 && cmd.length == 13) {\n                 let arg1Int: number = strToNumber(cmd.substr(1, 2));\n                 let arg2Int: number = strToNumber(cmd.substr(3, 2));\n                 let arg3Int: number = strToNumber(cmd.substr(5, 2));\n                 let arg4Int: number = strToNumber(cmd.substr(7, 2));\n                 let arg5Int: number = strToNumber(cmd.substr(9, 2));\n                 let arg6Int: number = strToNumber(cmd.substr(11, 2));\n    \n                 PA6_ad = arg1Int;\n                 PA7_ad = arg2Int;\n                 PB0_ad = arg3Int;\n                 PB1_ad = arg4Int;   \n    \n                 if (arg5Int != -1)\n                 {\n                    currentVoltage = Math.round(arg5Int*10353/200);\n                 }  \n    \n                 if (arg6Int != -1)\n                 {\n                  volume = arg6Int;\n                 }   \n                \n                PA6 = checkADPortValue(arg1Int);\n                PA7 = checkADPortValue(arg2Int);\n                PB0 = checkADPortValue(arg3Int);\n                PB1 = checkADPortValue(arg4Int);\n            }\n            else if (cmd.charAt(0).compare(\"B\") == 0 && cmd.length == 16)\n            {\n                let arg1Int: number = strToNumber(cmd.substr(1, 2));\n                let arg2Int: number = strToNumber(cmd.substr(3, 2));\n                let arg3Int: number = strToNumber(cmd.substr(5, 2));\n                let arg4Int: number = strToNumber(cmd.substr(7, 2));\n                let arg5Int: number = strToNumber(cmd.substr(9, 4));\n                let arg6Int: number = strToNumber(cmd.charAt(9));\n                let arg7Int: number = strToNumber(cmd.charAt(10));\n                let arg8Int: number = strToNumber(cmd.charAt(11));\n                PA6_ad = arg1Int;\n                PA7_ad = arg2Int;\n                PB0_ad = arg3Int;\n                PB1_ad = arg4Int;\n                PA6 = checkADPortValue(arg1Int);\n                PA7 = checkADPortValue(arg2Int);\n                PB0 = checkADPortValue(arg3Int);\n                PB1 = checkADPortValue(arg4Int);\n                if (arg5Int != -1) {\n                    let high = (arg5Int >> 8) & 0xff;\n                    let low = arg5Int & 0xff;\n                    if (high == 0)\n                    {\n                        if (adress != 0) {\n                            control.raiseEvent(MESSAGE_HEAD_STOP, 0);\n                        }    \n                        sendFlag = false;\n                        adress = 0;\n                    }\n                    else\n                    {\n                        if (low >= extAddress.adress_10 && low <= extAddress.adress_1)\n                        {\n                            control.raiseEvent(low, high);\n                        }\n                        else if (low == 0xff)\n                        {\n                            if (adress != high) {\n                                if (!sendFlag) {\n                                    control.raiseEvent(MESSAGE_HEAD, high);\n                                    sendFlag = true;\n                                }\n                                adress = high\n                            }\n                            else {\n                                cntIr++;\n                            }\n                            if (cntIr >= 3) {\n                                cntIr = 0;\n                                control.raiseEvent(MESSAGE_HEAD_LONG, high);\n                            }\n                        }                                   \n                    }\n                }\n                if (arg6Int != -1) {\n                    PC13 = arg6Int;\n                }\n                if (arg7Int != -1) {\n                    PB11 = arg7Int;\n                }\n                if (arg8Int != -1) {\n                    PB10 = arg8Int;\n                }    \n\n        }\n        if (cmd.compare(\"IROK\") == 0) {\n                music.playTone(988, music.beat(BeatFraction.Quarter));\n        }\n        if (cmd.charAt(0).compare(\"V\") == 0 && cmd.length > 3) {\n                let arg1Int: number = strToNumber(cmd.substr(1, 1));\n                let arg2Int: number = strToNumber(cmd.substr(3, 1));\n                if (arg1Int != -1 && arg2Int != -1) {\n                    versionNum = arg1Int * 10 + arg2Int;\n                }\n        }\n        if (cmd.charAt(0).compare(\"S\") == 0 && cmd.length == 5) {\n                let arg1Int: number = strToNumber(cmd.substr(1, 1));\n                let arg2Str = cmd.substr(2, 3);\n                if (arg2Str.compare(\"XXX\") == 0) {\n                    return;\n                }\n                let arg2Int: number = 0;\n                if (arg2Str.charAt(0).compare(\"F\") != 0) {\n                    arg2Int = strToNumber(arg2Str);\n                }\n                if (arg2Int > 1000)\n                    arg2Int = 1000;\n                if (arg1Int == 1) {\n                    servo1Angle = mapRGB(arg2Int, 0, 1000, 0, 240);\n                    servo1Angle -= 120;\n                }\n                else if (arg1Int == 2) {\n                    servo2Angle = mapRGB(arg2Int, 0, 1000, 0, 240);\n                    servo2Angle -= 120;\n                }\n            }\n        }\n        handleCmd = \"\";\n    }\n\n    function checkADPortValue(value: number): number {\n        if (value == -1)\n            return 2;\n        if (value <= 0x2E)\n            return 0;\n        else if (value >= 0xAA)\n            return 1;\n        else\n            return 2;//未识别电平状态\n    }\n\n    function findIndexof(src: string, strFind: string, startIndex: number): number {\n        for (let i = startIndex; i < src.length; i++) {\n            if (src.charAt(i).compare(strFind) == 0) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    function countChar(src: string, strFind: string): number {\n        let cnt: number = 0;\n        for (let i = 0; i < src.length; i++) {\n            if (src.charAt(i).compare(strFind) == 0) {\n                cnt++;\n            }\n        }\n        return cnt;\n    }\n\n    function strToNumber(str: string): number {\n        let num: number = 0;\n        for (let i = 0; i < str.length; i++) {\n            let tmp: number = converOneChar(str.charAt(i));\n            if (tmp == -1)\n                return -1;\n            if (i > 0)\n                num *= 16;\n            num += tmp;\n        }\n        return num;\n    }\n\n    function converOneChar(str: string): number {\n        if (str.compare(\"0\") >= 0 && str.compare(\"9\") <= 0) {\n            return parseInt(str);\n        }\n        else if (str.compare(\"A\") >= 0 && str.compare(\"F\") <= 0) {\n            if (str.compare(\"A\") == 0) {\n                return 10;\n            }\n            else if (str.compare(\"B\") == 0) {\n                return 11;\n            }\n            else if (str.compare(\"C\") == 0) {\n                return 12;\n            }\n            else if (str.compare(\"D\") == 0) {\n                return 13;\n            }\n            else if (str.compare(\"E\") == 0) {\n                return 14;\n            }\n            else if (str.compare(\"F\") == 0) {\n                return 15;\n            }\n            return -1;\n        }\n        else\n            return -1;\n    }\n\n    /**\n    * Set the angle of bus servo 1 to 8, range of -120~120 degree\n    */\n    //% weight=96 blockId=qdee_setBusServo block=\"Set bus servo|port %port|index %index|angle(-120~120) %angle|duration(ms) %duration\"\n    //% angle.min=-120 angle.max=120\n    //% inlineInputMode=inline\n    //% subcategory=Control\n    export function qdee_setBusServo(port: busServoPort, index: number, angle: number, duration: number) {\n        angle = angle * -1;\n        if (angle > 120 || angle < -120) {\n            return;\n        }\n\n        angle += 120;\n\n        let position = mapRGB(angle, 0, 240, 0, 1000);\n\n        let buf = pins.createBuffer(10);\n        buf[0] = 0x55;\n        buf[1] = 0x55;\n        buf[2] = 0x08;\n        buf[3] = 0x03;//cmd type\n        buf[4] = 0x01;\n        buf[5] = duration & 0xff;\n        buf[6] = (duration >> 8) & 0xff;\n        buf[7] = index;\n        buf[8] = position & 0xff;\n        buf[9] = (position >> 8) & 0xff;\n        serial.writeBuffer(buf);\n    }\n\n    /**\n    * Set the number of the servo.\n    */\n    //% weight=94 blockId=qdee_setBusServoNum block=\"Set bus servo|number %port|\"\n    //% subcategory=Control\n    export function qdee_setBusServoNum(index: number) {\n        let buf = pins.createBuffer(5);\n        buf[0] = 0x55;\n        buf[1] = 0x55;\n        buf[2] = 0x03;\n        buf[3] = 0x36;//cmd type\n        buf[4] = index;\n        serial.writeBuffer(buf);\n    }\n\n    /**\n     * Send read qdee servos angle command\n     */\n    //% weight=92 blockId=qdee_readAngle block=\"Read|%servo|angle command \"\n    //% subcategory=Control\n    export function qdee_readAngle(servo: Servos): number {\n        let buf = pins.createBuffer(6);\n        buf[0] = 0x55;\n        buf[1] = 0x55;\n        buf[2] = 0x04;\n        buf[3] = 0x3E;//cmd type\n        buf[4] = 0x05;\n        buf[5] = servo;\n        serial.writeBuffer(buf);\n        basic.pause(200);\n\n        let value = 0;\n        if (servo == Servos.Servo1) {\n            if (servo1Angle != 0xfff) {\n                value = servo1Angle;\n                servo1Angle = 0xfff;\n                return value;\n            }\n            else {\n                basic.pause(200);\n                if (servo1Angle != 0xfff) {\n                    value = servo1Angle;\n                    servo1Angle = 0xfff;\n                    return value;\n                }\n            }\n        }\n        else if (servo == Servos.Servo2) {\n            if (servo2Angle != 0xfff) {\n                value = servo2Angle;\n                servo2Angle = 0xfff;\n                return value;\n            }\n            else {\n                basic.pause(200);\n                if (servo2Angle != 0xfff) {\n                    value = servo2Angle;\n                    servo2Angle = 0xfff;\n                    return value;\n                }\n            }\n        }\n        return 0;\n    }\n\n\n    /**\n    *\tSet the speed of the number 1 motor and number 2 motor, range of -100~100, that can control the tank to go advance or turn of.\n    */\n    //% weight=90 blockId=qdee_setMotorSpeed block=\"Set motor1 speed(-100~100)|%speed1|and motor2|speed %speed2\"\n    //% speed1.min=-100 speed1.max=100\n    //% speed2.min=-100 speed2.max=100\n    //% subcategory=Control\n    export function qdee_setMotorSpeed(speed1: number, speed2: number) {\n        if (speed1 > 100 || speed1 < -100 || speed2 > 100 || speed2 < -100) {\n            return;\n        }\n        speed1 = speed1 * -1;\n        speed2 = speed2 * -1;\n        let buf = pins.createBuffer(6);\n        buf[0] = 0x55;\n        buf[1] = 0x55;\n        buf[2] = 0x04;\n        buf[3] = 0x32;//cmd type\n        buf[4] = speed2;\n        buf[5] = speed1;\n        serial.writeBuffer(buf);\n    }\n    \n    /**\n   * Set fan speed\n   * @param speed the speed of the fan in -100~100. eg: 80\n   */\n    //% weight=88 blockId=qdee_fan_speed block=\"Set the fan|port %port|speed %speed\"\n    //% speed.min=-100 speed.max=100\n    //% subcategory=Control\n    export function qdee_fan_speed(port: fanPort, speed: number) {\n        let pin1Clock = 0;\n        let pin2Clock = 0;\n        if (speed > 100)\n            speed = 100;\n        else if (speed < -100)\n            speed = -100;\n        speed = Math.round(speed * 1023 / 100);\n        if (speed > 0)//正转\n        {\n            pin1Clock = speed;\n        }\n        else {\n            pin2Clock = -1 * speed;\n        }\n        switch (port) {\n            case fanPort.port1:\n                pins.analogWritePin(AnalogPin.P1, pin1Clock);\n                pins.analogWritePin(AnalogPin.P2, pin2Clock);\n                break;\n            case fanPort.port2:\n                pins.analogWritePin(AnalogPin.P13, pin1Clock);\n                pins.analogWritePin(AnalogPin.P14, pin2Clock);\n                break;\n        }\n    }\n\n    /**\n    * Set the Qdee show facial expressions\n    */\n    //% weight=86 blockId=qdee_show_expressions block=\"Qdee show facial expressions %type\"\n    //% type.min=0 type.max=10\n    //% subcategory=Control\n    export function qdee_show_expressions(type: number) {\n        switch (type)\n        {\n            case 0:\n            basic.showLeds(`\n            . . . . .\n            . . . . .\n            . . . . .\n            . . . . .\n            . . . . .\n            `)\n            break;\n\n            case 1:\n                basic.showIcon(IconNames.Heart);\n                break;\n            \n            case 2:\n                basic.showIcon(IconNames.Yes);\n                break;\n            \n            case 3:\n                basic.showIcon(IconNames.No);\n                break;\n            \n            case 4:\n                basic.showIcon(IconNames.Happy)\n                break;\n            \n            case 5:\n                basic.showIcon(IconNames.Sad)\n                break;\n            \n            case 6:\n                basic.showIcon(IconNames.Angry)\n                break;\n            \n            case 7:\n            basic.showLeds(`\n            . . # . .\n            . # # # .\n            # . # . #\n            . . # . .\n            . . # . .\n            `)\n            break;\n            \n            case 8:\n            basic.showLeds(`\n            . . # . .\n            . . # . .\n            # . # . #\n            . # # # .\n            . . # . .\n            `)\n            break;\n            \n            case 9:\n            basic.showLeds(`\n            . . # . .\n            . # . . .\n            # # # # #\n            . # . . .\n            . . # . .\n            `)\n                break;\n            \n            case 10:\n            basic.showLeds(`\n            . . # . .\n            . . . # .\n            # # # # #\n            . . . # .\n            . . # . .\n            `)\n                break;\n            \n        }\n    }\n    \n    /**\n     * Do someting when Qdee receive custom ir code\n     * @param address the message id\n     * @param code the button that needs to be pressed\n     * @param body code to run when event is raised\n     */\n    //% weight=84 blockId=onQdee_custom_ir_pressed block=\"on ir receive|%address|code %code\"\n    //% subcategory=IR\n    export function onQdee_custom_ir_pressed(address: extAddress, code: number, body: Action) {\n        control.onEvent(address, code, body);\n    }\n\n    /**\n    * Let Qdee send ir custom data\n    */\n    //% weight=82 blockId=qdee_send_ir_data block=\"Let Qdee send custom ir|%address|code %num\"\n    //% num.min=0 num.max=254  \n    //% subcategory=IR\n    export function qdee_send_ir_data(address: extAddress, num: number) {\n        if (num < 0 || num > 254)\n            return;\n        let buf = pins.createBuffer(8);\n        buf[0] = 0x55;\n        buf[1] = 0x55;\n        buf[2] = 0x06;\n        buf[3] = 0x3E;//cmd type\n        buf[4] = 0x04;\n        buf[5] = num;\n        buf[6] = address;\n        buf[7] = 0;\n        serial.writeBuffer(buf);\n    }\n\n    /**\n     * Do someting when Qdee receive remote-control code\n     * @param code the ir key button that needs to be pressed\n     * @param body code to run when event is raised\n     */\n    //% weight=80 blockId=onQdee_remote_ir_pressed block=\"on remote-control|%code|pressed\"\n    //% subcategory=IR\n    export function onQdee_remote_ir_pressed(code: IRKEY, body: Action) {\n        control.onEvent(MESSAGE_HEAD, code, body);\n}\n    \n    /**\n     * Do someting when remote-control longpress\n     * @param code the ir key button that needs to be pressed\n     * @param body code to run when event is raised\n     */\n    //% weight=78 blockId=onQdee_remote_ir_longpressed block=\"on remote-control|%code|long pressed\"\n    //% subcategory=IR\n    export function onQdee_remote_ir_longpressed(code: IRKEY, body: Action) {\n        control.onEvent(MESSAGE_HEAD_LONG, code, body);\n    }\n\n    /**\n     * Do someting when remote-control stop send\n     * @param code the ir key button that needs to be pressed\n     * @param body code to run when event is raised\n     */\n    //% weight=76 blockId=onQdee_remote_no_ir block=\"on remote-control stop send\"\n    //% subcategory=IR    \n    export function onQdee_remote_no_ir(body: Action) {\n        control.onEvent(MESSAGE_HEAD_STOP, 0, body);\n    }\n\n    /**\n    * Let Qdee send ir remote-control data\n    */\n    //% weight=74 blockId=qdee_send_remote_data block=\"Let Qdee send ir remote-control|key %irKey|\"\n    //% subcategory=IR\n    export function qdee_send_remote_data(irKey: IRKEY) {\n        let buf = pins.createBuffer(8);\n        buf[0] = 0x55;\n        buf[1] = 0x55;\n        buf[2] = 0x06;\n        buf[3] = 0x3E;//cmd type\n        buf[4] = 0x04;\n        buf[5] = irKey;\n        buf[6] = 0xFF;\n        buf[7] = 0;\n        serial.writeBuffer(buf);\n    }\n\n\n    /**\n    * Let Qdee send ir remote-control data from phone\n    */\n    //% weight=72 blockId=qdee_send_remote_phone_data block=\"Let Qdee send phone ir remote-control|key %data|\"\n    //% subcategory=IR\n    export function qdee_send_remote_phone_data(data: number) {\n        let irKey: IRKEY;\n        switch (data) {\n            case 0:\n                irKey = IRKEY.R0;\n                break;\n\n            case 1:\n                irKey = IRKEY.R1;\n                break;\n\n            case 2:\n                irKey = IRKEY.R2;\n                break;\n\n            case 3:\n                irKey = IRKEY.R3;\n                break;\n\n            case 4:\n                irKey = IRKEY.R4;\n                break;\n\n            case 5:\n                irKey = IRKEY.R5;\n                break;\n\n            case 6:\n                irKey = IRKEY.R6;\n                break;\n\n            case 7:\n                irKey = IRKEY.R7;\n                break;\n\n            case 8:\n                irKey = IRKEY.R8;\n                break;\n\n            case 9:\n                irKey = IRKEY.R9;\n                break;\n\n            case 10:\n                irKey = IRKEY.ADD;\n                break;\n\n            case 11:\n                irKey = IRKEY.MINUS;\n                break;\n\n        }\n        let buf = pins.createBuffer(8);\n        buf[0] = 0x55;\n        buf[1] = 0x55;\n        buf[2] = 0x06;\n        buf[3] = 0x3E;//cmd type\n        buf[4] = 0x04;\n        buf[5] = irKey;\n        buf[6] = 0xFF;\n        buf[7] = 0;\n        serial.writeBuffer(buf);\n    }\n\n    /**\n    * Set ir enter learn mode\n    * @param num number of the learn code in 1-10. eg: 1\n    */\n    //% weight=70 blockId=qdee_ir_learn_mode block=\"Set ir enter learning mode,code number(1~10) %num|\"   \n    //% num.min=1 num.max=10    \n    //% subcategory=IR\n    export function qdee_ir_learn_mode(num: number) {\n        if (num < 1 || num > 10)\n            return;\n        let buf = pins.createBuffer(6);\n        buf[0] = 0x55;\n        buf[1] = 0x55;\n        buf[2] = 0x04;\n        buf[3] = 0x3E;//cmd type\n        buf[4] = 0x03;\n        buf[5] = num - 1;\n        serial.writeBuffer(buf);\n    }\n\n    /**\n    * Let Qdee send ir learn data\n    * @param num number of the learn code in 1-10. eg: 1\n    */\n    //% weight=68 blockId=qdee_send_learn_data block=\"Let Qdee send ir learning code,code|number(1~10) %num|\"\n    //% num.min=1 num.max=10  \n    //% subcategory=IR\n    export function qdee_send_learn_data(num: number) {\n        if (num < 1 || num > 10)\n            return;\n        let buf = pins.createBuffer(8);\n        buf[0] = 0x55;\n        buf[1] = 0x55;\n        buf[2] = 0x06;\n        buf[3] = 0x3E;//cmd type\n        buf[4] = 0x04;\n        buf[5] = 0xFF;\n        buf[6] = 0xFF;\n        buf[7] = num - 1;\n        serial.writeBuffer(buf);\n    }\n\n\n    /**\n    * Get the volume level detected by the sound sensor, range 0 to 255\n    */\n    //% weight=66 blockId=qdee_getSoundVolume block=\"Sound volume\"\n    //% subcategory=Sensor\n    export function qdee_getSoundVolume(): number {\n        return volume;\n    }\n\n    /**\n     *  Get Qdee current voltage,the unit is mV\n    */\n    //% weight=64 blockId=qdee_getBatVoltage block=\"Get Qdee current voltage (mV)\"\n    //% subcategory=Sensor\n    export function qdee_getBatVoltage(): number {\n        return currentVoltage;\n    }\n\n    const APDS9960_I2C_ADDR = 0x39;\n    const APDS9960_ID_1 = 0xA8;\n    const APDS9960_ID_2 = 0x9C;\n    /* APDS-9960 register addresses */\n    const APDS9960_ENABLE = 0x80;\n    const APDS9960_ATIME = 0x81;\n    const APDS9960_WTIME = 0x83;\n    const APDS9960_AILTL = 0x84;\n    const APDS9960_AILTH = 0x85;\n    const APDS9960_AIHTL = 0x86;\n    const APDS9960_AIHTH = 0x87;\n    const APDS9960_PERS = 0x8C;\n    const APDS9960_CONFIG1 = 0x8D;\n    const APDS9960_PPULSE = 0x8E;\n    const APDS9960_CONTROL = 0x8F;\n    const APDS9960_CONFIG2 = 0x90;\n    const APDS9960_ID = 0x92;\n    const APDS9960_STATUS = 0x93;\n    const APDS9960_CDATAL = 0x94;\n    const APDS9960_CDATAH = 0x95;\n    const APDS9960_RDATAL = 0x96;\n    const APDS9960_RDATAH = 0x97;\n    const APDS9960_GDATAL = 0x98;\n    const APDS9960_GDATAH = 0x99;\n    const APDS9960_BDATAL = 0x9A;\n    const APDS9960_BDATAH = 0x9B;\n    const APDS9960_POFFSET_UR = 0x9D;\n    const APDS9960_POFFSET_DL = 0x9E;\n    const APDS9960_CONFIG3 = 0x9F;\n    const APDS9960_GCONF4 = 0xAB;\n    const APDS9960_AICLEAR = 0xE7;\n\n\n    /* LED Drive values */\n    const LED_DRIVE_100MA = 0;\n\n    /* ALS Gain (AGAIN) values */\n    const AGAIN_4X = 1;\n\n    /* Default values */\n    const DEFAULT_ATIME = 219;    // 103ms\n    const DEFAULT_WTIME = 246;    // 27ms\n    const DEFAULT_PROX_PPULSE = 0x87;    // 16us, 8 pulses\n    const DEFAULT_POFFSET_UR = 0;       // 0 offset\n    const DEFAULT_POFFSET_DL = 0;       // 0 offset      \n    const DEFAULT_CONFIG1 = 0x60;    // No 12x wait (WTIME) factor\n    const DEFAULT_AILT = 0xFFFF;  // Force interrupt for calibration\n    const DEFAULT_AIHT = 0;\n    const DEFAULT_PERS = 0x11;    // 2 consecutive prox or ALS for int.\n    const DEFAULT_CONFIG2 = 0x01;    // No saturation interrupts or LED boost  \n    const DEFAULT_CONFIG3 = 0;       // Enable all photodiodes, no SAI\n    const DEFAULT_LDRIVE = LED_DRIVE_100MA;\n    const DEFAULT_AGAIN = AGAIN_4X;\n\n    const OFF = 0;\n    const POWER = 0;\n    const AMBIENT_LIGHT = 1;\n    const ALL = 7;\n\n    const red_wb = 2500;\n    const green_wb = 3900;\n    const blue_wb = 5820;\n\n    function i2cwrite(reg: number, value: number) {\n        let buf = pins.createBuffer(2);\n        buf[0] = reg;\n        buf[1] = value;\n        pins.i2cWriteBuffer(APDS9960_I2C_ADDR, buf);\n    }\n\n    function i2cread(reg: number): number {\n        pins.i2cWriteNumber(APDS9960_I2C_ADDR, reg, NumberFormat.UInt8BE);\n        let val = pins.i2cReadNumber(APDS9960_I2C_ADDR, NumberFormat.UInt8BE);\n        return val;\n    }\n\n    function InitColor(): boolean {\n        let id = i2cread(APDS9960_ID);\n        //  serial.writeLine(\"id:\")\n        //  serial.writeNumber(id); \n        // if (!(id == APDS9960_ID_1 || id == APDS9960_ID_2)) {\n        //     return false;\n        // }\n        //  serial.writeLine(\"set mode:\")\n        setMode(ALL, OFF);\n        i2cwrite(APDS9960_ATIME, DEFAULT_ATIME);\n        i2cwrite(APDS9960_WTIME, DEFAULT_WTIME);\n        i2cwrite(APDS9960_PPULSE, DEFAULT_PROX_PPULSE);\n        i2cwrite(APDS9960_POFFSET_UR, DEFAULT_POFFSET_UR);\n        i2cwrite(APDS9960_POFFSET_DL, DEFAULT_POFFSET_DL);\n        i2cwrite(APDS9960_CONFIG1, DEFAULT_CONFIG1);\n        setLEDDrive(DEFAULT_LDRIVE);\n        setAmbientLightGain(DEFAULT_AGAIN);\n        setLightIntLowThreshold(DEFAULT_AILT);\n        setLightIntHighThreshold(DEFAULT_AIHT);\n        i2cwrite(APDS9960_PERS, DEFAULT_PERS);\n        i2cwrite(APDS9960_CONFIG2, DEFAULT_CONFIG2);\n        i2cwrite(APDS9960_CONFIG3, DEFAULT_CONFIG3);\n        return true;\n    }\n\n    function setLEDDrive(drive: number) {\n        let val = i2cread(APDS9960_CONTROL);\n        /* Set bits in register to given value */\n        drive &= 0b00000011;\n        drive = drive << 6;\n        val &= 0b00111111;\n        val |= drive;\n        i2cwrite(APDS9960_CONTROL, val);\n    }\n\n    function setLightIntLowThreshold(threshold: number) {\n        let val_low = threshold & 0x00FF;\n        let val_high = (threshold & 0xFF00) >> 8;\n        i2cwrite(APDS9960_AILTL, val_low);\n        i2cwrite(APDS9960_AILTH, val_high);\n    }\n\n    function setLightIntHighThreshold(threshold: number) {\n        let val_low = threshold & 0x00FF;\n        let val_high = (threshold & 0xFF00) >> 8;\n        i2cwrite(APDS9960_AIHTL, val_low);\n        i2cwrite(APDS9960_AIHTH, val_high);\n    }\n\n\n    function rgb2hue(r: number, g: number, b: number): number {\n        let max = Math.max(r, Math.max(g, b))\n        let min = Math.min(r, Math.min(g, b))\n        let c = max - min;\n        let hue = 0;\n        let segment = 0;\n        let shift = 0;\n        if (c == 0)\n            return 0;\n        if ((r > g) && (r > b)) {\n            segment = (60.0 * (g - b)) / c;\n            if (segment < 0)\n                hue = segment + 360;\n        }\n        else if ((g > b) && (g > r)) {\n            segment = (60.0 * (b - r)) / c;\n            hue = segment + 120;\n        }\n        else if ((b > g) && (b > r)) {\n            segment = (60.0 * (r - g)) / c;\n            hue = segment + 240;\n        }\n        return hue;\n    }\n\n    function setMode(mode: number, enable: number) {\n        let reg_val = getMode();\n        /* Change bit(s) in ENABLE register */\n        enable = enable & 0x01;\n        if (mode >= 0 && mode <= 6) {\n            if (enable > 0) {\n                reg_val |= (1 << mode);\n            }\n            else {\n                //reg_val &= ~(1 << mode);\n                reg_val &= (0xff - (1 << mode));\n            }\n        }\n        else if (mode == ALL) {\n            if (enable > 0) {\n                reg_val = 0x7F;\n            }\n            else {\n                reg_val = 0x00;\n            }\n        }\n        i2cwrite(APDS9960_ENABLE, reg_val);\n    }\n\n    function getMode(): number {\n        let enable_value = i2cread(APDS9960_ENABLE);\n        return enable_value;\n    }\n\n    function enableLightSensor(interrupts: boolean) {\n        setAmbientLightGain(DEFAULT_AGAIN);\n        if (interrupts) {\n            setAmbientLightIntEnable(1);\n        }\n        else {\n            setAmbientLightIntEnable(0);\n        }\n        enablePower();\n        setMode(AMBIENT_LIGHT, 1);\n    }\n\n    function setAmbientLightGain(drive: number) {\n        let val = i2cread(APDS9960_CONTROL);\n        /* Set bits in register to given value */\n        drive &= 0b00000011;\n        val &= 0b11111100;\n        val |= drive;\n        i2cwrite(APDS9960_CONTROL, val);\n    }\n\n    function getAmbientLightGain(): number {\n        let val = i2cread(APDS9960_CONTROL);\n        val &= 0b00000011;\n        return val;\n    }\n\n    function enablePower() {\n        setMode(POWER, 1);\n    }\n\n    function setAmbientLightIntEnable(enable: number) {\n        let val = i2cread(APDS9960_ENABLE);\n        /* Set bits in register to given value */\n        enable &= 0b00000001;\n        enable = enable << 4;\n        val &= 0b11101111;\n        val |= enable;\n        i2cwrite(APDS9960_ENABLE, val);\n    }\n    /**\n\t *  Color sensor return the color.\n\t */\n    //% weight=62 blockId=qdee_checkCurrentColor block=\"Current color %color\"\n    //% subcategory=Sensor\n    export function qdee_checkCurrentColor(color: qdee_Colors): boolean {\n        let c = i2cread(APDS9960_CDATAL) + i2cread(APDS9960_CDATAH) * 256;\n        let r = i2cread(APDS9960_RDATAL) + i2cread(APDS9960_RDATAH) * 256;\n        let g = i2cread(APDS9960_GDATAL) + i2cread(APDS9960_GDATAH) * 256;\n        let b = i2cread(APDS9960_BDATAL) + i2cread(APDS9960_BDATAH) * 256;\n\n        if (r > red_wb)\n            r = red_wb;\n        if (g > green_wb)\n            g = green_wb;\n        if (b > blue_wb)\n            b = blue_wb;\n\n        r = Math.round(mapRGB(r, 0, red_wb, 0, 255));\n        g = Math.round(mapRGB(g, 0, green_wb, 0, 255));\n        b = Math.round(mapRGB(b, 0, blue_wb, 0, 255));\n\n        let hsv = rgb2hue(r, g, b)\n        let t = qdee_Colors.None;\n        if (c > 2200 && r > 65 && g > 65 && b > 65) {\n            t = qdee_Colors.White;\n        }\n        else if (c > 800) {\n            if (hsv < 8 || hsv > 350)\n                t = qdee_Colors.Red;\n            else if (hsv > 60 && hsv < 170) {\n                t = qdee_Colors.Green;\n            }\n            else if (hsv > 195 && hsv < 230) {\n                t = qdee_Colors.Blue;\n            }\n        }\n        else if (c > 200 && r > 10 && g > 7 && b > 7 && r < 16.5 && g < 15 && b < 14) {\n            t = qdee_Colors.Black;\n        }\n        return (color == t);\n    }\n\n\n    /**\n\t *  Color sensor return the color.\n\t */\n    //% weight=60 blockId=qdee_get_color block=\"color %color value(0~255)\"\n    //% subcategory=Sensor\n    export function qdee_get_color(color: qdee_RGBValue): number {\n        let value = 0;\n        let r = i2cread(APDS9960_RDATAL) + i2cread(APDS9960_RDATAH) * 256;\n        let g = i2cread(APDS9960_GDATAL) + i2cread(APDS9960_GDATAH) * 256;\n        let b = i2cread(APDS9960_BDATAL) + i2cread(APDS9960_BDATAH) * 256;\n\n        if (r > red_wb)\n            r = red_wb;\n        if (g > green_wb)\n            g = green_wb;\n        if (b > blue_wb)\n            b = blue_wb;\n\n        r = Math.round(mapRGB(r, 0, red_wb, 0, 255));\n        g = Math.round(mapRGB(g, 0, green_wb, 0, 255));\n        b = Math.round(mapRGB(b, 0, blue_wb, 0, 255));\n\n        switch (color)\n        {\n            case qdee_RGBValue.Red:\n                value = r;\n                break;\n            \n            case qdee_RGBValue.Green:\n                value = g;\n                break;\n            \n            case qdee_RGBValue.Blue:\n                value = b;\n                break;\n        }\n        return value;\n    }\n\n\n    /**\n    * Get the condition of the line follower sensor\n    */\n    //% weight=58 blockGap=20 blockId=qdee_readLineFollowerStatus block=\"Line follower status|port %port|%status\"\n    //% subcategory=Sensor\n    export function qdee_readLineFollowerStatus(port: lineFollowPort, status: qdee_lineFollower): boolean {\n        let s1 = 0;\n        let s2 = 0;\n\n        s1 = pins.analogReadPin(AnalogPin.P1);\n        s2 = pins.analogReadPin(AnalogPin.P2);\n\n        if (s1 < 900)\n            s1 = 0;\n        else\n            s1 = 1;\n        if (s2 < 900)\n            s2 = 0;\n        else\n            s2 = 1;\n\n        let s = ((1 & s1) << 1) | s2;\n        if (s == status) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    /**\n     * Get the line follower sensor port ad value\n     */\n    //% weight=56 blockId=qdee_lineSensorValue block=\"Get line follower sensor|port %port|%sensor|ad value\"\n   //% subcategory=Sensor\n    export function qdee_lineSensorValue(port: lineFollowPort, sensor: LineFollowerSensor): number {\n        let s1 = 0;\n        let s2 = 0;\n        s1 = pins.analogReadPin(AnalogPin.P1);\n        s2 = pins.analogReadPin(AnalogPin.P2);\n        s1 = s1 * 255 / 1023;\n        s2 = s2 * 255 / 1023;\n\n        if (sensor == LineFollowerSensor.LFSensor_1) {\n            return Math.round(255 - s1);\n        }\n        else {\n            return Math.round(255 - s2);\n        }\n\n    }\n    /**\n    * Get the condition of the touch button,press return 1,or return 0\n    */\n    //% weight=54 blockGap=20 blockId=qdee_touchButton block=\" Touch button|port %port|is pressed\"    \n    //% subcategory=Sensor    \n    export function qdee_touchButton(port: touchKeyPort): boolean {\n        let status: boolean = false;\n        switch (port) {\n            case touchKeyPort.port1:\n                pins.setPull(DigitalPin.P1, PinPullMode.PullUp);\n                status = !pins.digitalReadPin(DigitalPin.P1);\n                break;\n            case touchKeyPort.port2:\n                pins.setPull(DigitalPin.P13, PinPullMode.PullUp);\n                status = !pins.digitalReadPin(DigitalPin.P13);\n                break;\n            case touchKeyPort.port3:\n                pins.setPull(DigitalPin.P16, PinPullMode.PullUp);\n                status = !pins.digitalReadPin(DigitalPin.P16);\n                break;\n            case touchKeyPort.port6:\n                status = !PA6;\n                break;\n            case touchKeyPort.port8:\n                status = !PB0;\n                break;\n        }\n        return status;\n    }\n\n    let distanceBak = 0;\n    /**\n     * Get the distance of ultrasonic detection to the obstacle \n     */\n    //% weight=52 blockId=qdee_ultrasonic  block=\"Ultrasonic|port %port|distance(cm)\"\n    //% subcategory=Sensor    \n    export function qdee_ultrasonic(port: ultrasonicPort): number {\n        let trigPin: DigitalPin = DigitalPin.P1;\n        let echoPin: DigitalPin = DigitalPin.P2;\n        let distance: number = 0;\n        let d: number = 0;\n        if (versionNum == -1)//没有读取到版本号\n        {\n            switch (port) {\n                case ultrasonicPort.port1:\n                    trigPin = DigitalPin.P1;\n                    break;\n                case ultrasonicPort.port2:\n                    trigPin = DigitalPin.P13;\n                    break;\n            }\n            pins.setPull(trigPin, PinPullMode.PullNone);\n            pins.digitalWritePin(trigPin, 0);\n            control.waitMicros(2);\n            pins.digitalWritePin(trigPin, 1);\n            control.waitMicros(10);\n            pins.digitalWritePin(trigPin, 0);\n\n            d = pins.pulseIn(trigPin, PulseValue.High, 15000);\n            distance = d;\n            // filter timeout spikes\n            if (distance == 0 || distance >= 13920) {\n                distance = distanceBak;\n            }\n            else\n                distanceBak = d;\n\n        }\n        else {\n            switch (port) {\n                case ultrasonicPort.port1:\n                    trigPin = DigitalPin.P1;\n                    echoPin = DigitalPin.P2;\n                    break;\n                case ultrasonicPort.port2:\n                    trigPin = DigitalPin.P13;\n                    echoPin = DigitalPin.P14;\n                    break;\n            }\n            pins.setPull(echoPin, PinPullMode.PullNone);\n            pins.setPull(trigPin, PinPullMode.PullNone);\n\n            // send pulse\n            pins.digitalWritePin(trigPin, 0);\n            control.waitMicros(2);\n            pins.digitalWritePin(trigPin, 1);\n            control.waitMicros(10);\n            pins.digitalWritePin(trigPin, 0);\n            // read pulse\n            d = pins.pulseIn(echoPin, PulseValue.High, 15000);\n            distance = d;\n            // filter timeout spikes\n            if (distance == 0 || distance >= 13920) {\n                distance = distanceBak;\n            }\n            else\n                distanceBak = d;\n        }\n\n        return Math.round(distance * 10 / 6 / 58);\n    }\n\n    /**\n    * Get the ad value of the knob moudule\n    */\n    //% weight=50 blockId=qdee_getKnobValue blockGap=50 block=\"Get knob|port %port|value(0~255)\"\n    //% subcategory=Sensor    \n    export function qdee_getKnobValue(port: knobPort): number {\n        let adValue = 0;\n        switch (port) {\n            case knobPort.port1:\n                adValue = pins.analogReadPin(AnalogPin.P1);\n                adValue = adValue * 255 / 1023;\n                break;\n            case knobPort.port6:\n                adValue = PA6_ad;\n                break;\n            case knobPort.port8:\n                adValue = PB0_ad;\n                break;\n        }\n        return Math.round(adValue);\n    }\n    \n    /**\n     * Set extension pins output high/low\n     */\n    function qdee_ext_output(pin: number, out: number) {\n        let buf = pins.createBuffer(7);\n        buf[0] = 0x55;\n        buf[1] = 0x55;\n        buf[2] = 0x05;\n        buf[3] = 0x3E;//cmd type\n        buf[4] = 0x2;\n        buf[5] = pin;\n        buf[6] = out;\n        serial.writeBuffer(buf);\n    }\n\n    function mapRGB(x: number, in_min: number, in_max: number, out_min: number, out_max: number): number {\n        return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\n    }\n\n    /**\n    * Resolve the Bluetooth that phone APP send command type, the total of nine types of commands: tank display command, servo debug command, obtaining the distance of ultrasonic command, obtaining temperature command, obtain sound size rank orders, to obtain the light level command, set the color lights command, honking command, firmware version information command.\n    */\n    //% weight=48 blockId=qdee_analyzeBluetoothCmd block=\"Get bluetooth command type %str\"\n    //% subcategory=Bluetooth\n    export function qdee_analyzeBluetoothCmd(str: string): number {\n        if (str.length > 6) {\n            let cmdHead = str.substr(0, 3);\n\n            if (cmdHead == \"CMD\") {\n                let cmdTypeStr: string = str.substr(4, 2);\n                let cmdType = strToNumber(cmdTypeStr);\n                if (cmdType > QdeeCmdType.PLAY_TONE || cmdType < 0) {\n                    return QdeeCmdType.NO_COMMAND;\n                }\n                else {\n                    return cmdType;\n                }\n            }\n            else {\n                return QdeeCmdType.NO_COMMAND;\n            }\n        }\n        else {\n            return QdeeCmdType.NO_COMMAND;\n        }\n    }\n    /**\n     * Resolve the parameters that the phone APP send the command,there are 3 parameters of servo debug command,the other command has just one parameter.\n    * @param index number of the learn code in 1-3. eg: 1\n     */\n    //% weight=46 blockId=qdee_getArgs block=\"Get bluetooth command|%str|argument at %index\"\n    //% index.min=1 index.max=3\n    //% subcategory=Bluetooth\n    export function qdee_getArgs(str: string, index: number): number {\n        let cmdType = qdee_analyzeBluetoothCmd(str);\n        if (cmdType == QdeeCmdType.NO_COMMAND) {\n            return QdeeCarRunCmdType.COMMAND_ERRO;\n        }\n        else {\n            let dataIndex = 7;\n            let subLegth = 2;\n            if (index == 2) {\n                dataIndex = 10;\n                subLegth = 2;\n            }\n            else if (index == 3) {\n                dataIndex = 13;\n                subLegth = 4;\n            }\n            if (cmdType == QdeeCmdType.SERVO) {\n                if (str.length < 17) {\n                    return QdeeCmdType.NO_COMMAND;\n                }\n            }\n            if ((index == 1 && str.length < 10) || (index == 2 && str.length < 13) || (index == 3 && str.length < 17)) {\n                return 0;\n            }\n            let strArgs = str.substr(dataIndex, subLegth);\n            let arg = strToNumber(strArgs);\n            if (arg == -1)\n                return 0;\n            return arg;\n        }\n    }\n\n    /**\n     * Returns the enumeration of the command type, which can be compared with this module after obtaining the bluetooth command type sent by the mobile phone APP.\n     */\n    //% weight=44 blockId=qdee_getBluetoothCmdtype block=\"Bluetooth command type %type\"\n    //% subcategory=Bluetooth\n    export function qdee_getBluetoothCmdtype(type: QdeeCmdType): number {\n        return type;\n    }\n\n    /**\n     * The command type of the tank is stop, go ahead, back, turn left, turn right, slow down, turn left slowly, turn right slowly.\n     */\n    //% weight=42 blockId=qdee_getRunCarType block=\"Car run type %type\"\n    //% subcategory=Bluetooth\n    export function qdee_getRunCarType(type: QdeeCarRunCmdType): number {\n        return type;\n    }\n\n   \n    /**\n      * The distance from the ultrasonic obstacle to the standard command, which is sent to the mobile phone. The APP will indicate the distance of the ultrasonic obstacle.\n      */\n    //% weight=40 blockId=qdee_convertUltrasonic block=\"Convert ultrasonic distance %data\"\n    //% subcategory=Bluetooth\n    export function qdee_convertUltrasonic(data: number): string {\n        let cmdStr: string = \"CMD|03|\";\n        cmdStr += data.toString();\n        cmdStr += \"|$\";\n        return cmdStr;\n    }\n    /**\n     * The conversion temperature value to standard command, sent to the mobile phone, and the APP displays the current temperature.\n     */\n    //% weight=38 blockId=qdee_convertTemperature block=\"Convert temperature %data\"\n    //% subcategory=Bluetooth\n    export function qdee_convertTemperature(data: number): string {\n        let cmdStr: string = \"CMD|04|\";\n        cmdStr += data.toString();\n        cmdStr += \"|$\";\n        return cmdStr;\n    }\n\n    /**\n     * Convert the sound value to the standard command and send it to the mobile phone. (0~255).\n     */\n    //% weight=36 blockId=qdee_convertSound block=\"Convert sound %data\"\n    //% subcategory=Bluetooth\n    export function qdee_convertSound(data: number): string {\n        let cmdStr: string = \"CMD|05|\";\n        cmdStr += data.toString();\n        cmdStr += \"|$\";\n        return cmdStr;\n    }\n\n    /**\n     * Convert the light value to the standard command and send it to the mobile phone. The APP displays the current light level (0~255).\n     */\n    //% weight=34 blockId=qdee_convertLight block=\"Convert light %data\"\n    //% subcategory=Bluetooth\n    export function qdee_convertLight(data: number): string {\n        let cmdStr: string = \"CMD|06|\";\n        cmdStr += data.toString();\n        cmdStr += \"|$\";\n        return cmdStr;\n    }\n\n    /**\n     * Convert the battery value to the standard command and send it to the mobile phone. The APP displays the current voltage.\n     */\n    //% weight=32 blockId=qdee_convertBattery blockGap=50 block=\"Convert battery %data\"\n    //% subcategory=Bluetooth\n    export function qdee_convertBattery(data: number): string {\n        let cmdStr: string = \"CMD|07|\";\n        cmdStr += data.toString();\n        cmdStr += \"|$\";\n        return cmdStr;\n    }\n    \n    /**\n\t * Initialize RGB\n\t */\n    function qdee_initRGBLight() {\n        if (!lhRGBLight) {\n            lhRGBLight = QdeeRGBLight.create(DigitalPin.P15, 6, QdeeRGBPixelMode.RGB);\n        }\n        qdee_clearLight();\n    }\n\n    /**\n         * Set the brightness of the strip. This flag only applies to future operation.\n         * @param brightness a measure of LED brightness in 0-255. eg: 255\n    */\n    //% blockId=\"qdee_setBrightness\" block=\"set brightness %brightness\"\n    //% weight=30\n    //% subcategory=Coloured_lights\n    export function qdee_setBrightness(brightness: number): void {\n        lhRGBLight.setBrightness(brightness);\n    }\n    \n    /**\n     * Set the color of the colored lights, after finished the setting please perform  the display of colored lights.\n     */\n    //% weight=28 blockId=qdee_setPixelRGB block=\"Set|%lightoffset|color to %rgb\"\n    //% subcategory=Coloured_lights    \n    export function qdee_setPixelRGB(lightoffset: QdeeLights, rgb: QdeeRGBColors) {\n        lhRGBLight.setPixelColor(lightoffset, rgb);\n    }\n    \n    /**\n     * Set RGB Color argument\n     */\n    //% weight=26 blockId=qdee_setPixelRGBArgs block=\"Set|%lightoffset|color to %rgb\"\n    //% subcategory=Coloured_lights    \n    export function qdee_setPixelRGBArgs(lightoffset: QdeeLights, rgb: number) {\n        lhRGBLight.setPixelColor(lightoffset, rgb);\n    }\n\n    /**\n     * Display the colored lights, and set the color of the colored lights to match the use. After setting the color of the colored lights, the color of the lights must be displayed.\n     */\n    //% weight=24 blockId=qdee_showLight block=\"Show light\"\n    //% subcategory=Coloured_lights    \n    export function qdee_showLight() {\n        lhRGBLight.show();\n    }\n\n    /**\n     * Clear the color of the colored lights and turn off the lights.\n     */\n    //% weight=22 blockGap=50 blockId=qdee_clearLight block=\"Clear light\"\n    //% subcategory=Coloured_lights    \n    export function qdee_clearLight() {\n        lhRGBLight.clear();\n    }\n\n    /**\n     * Set the color of the colored lights, after finished the setting please perform  the display of colored lights.\n     */\n    //% weight=20 blockGap=20 blockId=qdee_belt_setPixelRGB block=\"Set light belt|%lightoffset|color to %rgb\"\n    //% subcategory=Coloured_lights    \n    export function qdee_belt_setPixelRGB(lightoffset: QdeeLightsBelt, rgb: QdeeRGBColors) {\n        lhRGBLightBelt.setBeltPixelColor(lightoffset, rgb);\n    }\n     \n    /**\n     * Set the color of the colored lights, after finished the setting please perform  the display of colored lights.\n     */\n    //% weight=18 blockId=qdee_belt_setPixelRGBIndex block=\"Set light belt|%lightoffset|color to %rgb(1~9)\"\n    //% subcategory=Coloured_lights    \n    export function qdee_belt_setPixelRGBIndex(lightoffset: QdeeLightsBelt, rgb: number) {\n        lhRGBLightBelt.setBeltPixelColor(lightoffset, rgb);\n    }\n    \n    /**\n     * Set the color of the colored lights, after finished the setting please perform  the display of colored lights.\n     */\n    //% weight=16 blockId=qdee_belt_setPixelRGBSingle block=\"Set light belt index(0~29)|%lightoffset|color to %rgb\"\n    //% lightoffset.min=0  lightoffset.max=29 \n    //% subcategory=Coloured_lights    \n    export function qdee_belt_setPixelRGBSingle(lightoffset: number, rgb: QdeeRGBColors) {\n        lhRGBLightBelt.singleSetBeltPixelColor(lightoffset, rgb);\n    }\n     \n    /**\n     * Set the color of the colored lights, after finished the setting please perform  the display of colored lights.\n     */\n    //% weight=14 blockId=qdee_belt_setPixelRGBSingleRGBIndex block=\"Set light belt index(0~29)|%lightoffset|color to %rgb(1~9)\"\n    //% lightoffset.min=0  lightoffset.max=29 \n    //% subcategory=Coloured_lights    \n    export function qdee_belt_setPixelRGBSingleRGBIndex(lightoffset: number, rgb: number) {\n        lhRGBLightBelt.singleSetBeltPixelColor(lightoffset, rgb);\n    }\n    \n    /**\n     * Display the colored lights, and set the color of the colored lights to match the use. After setting the color of the colored lights, the color of the lights must be displayed.\n     */\n    //% weight=12 blockId=qdee_belt_showLight block=\"Show light belt\"\n    //% subcategory=Coloured_lights    \n    export function qdee_belt_showLight() {\n        lhRGBLightBelt.show();\n    }\n\n    /**\n     * Clear the color of the colored lights and turn off the lights.\n     */\n    //% weight=10 blockGap=50 blockId=qdee_belt_clearLight block=\"Clear light belt\"\n    //% subcategory=Coloured_lights    \n    export function qdee_belt_clearLight() {\n        lhRGBLightBelt.clear();\n    }\n}\n","pxt.json":"{\n    \"name\": \"qdee\",\n    \"version\": \"0.0.1\",\n    \"description\": \"Blocks for Hiwonder Qdee\",\n    \"license\": \"MIT\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"README.md\",\n        \"main.ts\",\n        \"QdeeRGBLight.ts\",\n        \"sendbuffer.asm\",\n        \"_locales/zh/qdee-strings.json\",\n        \"_locales/zh/qdee-jsdoc-strings.json\",\n        \"_locales/ko/qdee-strings.json\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"public\": true,\n    \"targetVersions\": {\n        \"branch\": \"v4.0.17\",\n        \"tag\": \"v4.0.17\",\n        \"commits\": \"https://github.com/microsoft/pxt-microbit/commits/e18cbd92585dcdba1714bda754fe361ca50a3f3f\",\n        \"target\": \"4.0.17\",\n        \"pxt\": \"7.0.13\"\n    },\n    \"preferredEditor\": \"tsprj\"\n}\n","sendbuffer.asm":"sendBufferAsm:\n\n    push {r4,r5,r6,r7,lr}\n    \n    mov r4, r0 ; save buff\n    mov r6, r1 ; save pin\n    \n    mov r0, r4\n    bl BufferMethods::length\n    mov r5, r0\n    \n    mov r0, r4\n    bl BufferMethods::getBytes\n    mov r4, r0\n    \n    ; setup pin as digital\n    mov r0, r6\n    movs r1, #0\n    bl pins::digitalWritePin\n    \n    ; load pin address\n    mov r0, r6\n    bl pins::getPinAddress\n\n    ldr r0, [r0, #8] ; get mbed DigitalOut from MicroBitPin\n    ldr r1, [r0, #4] ; r1-mask for this pin\n    ldr r2, [r0, #16] ; r2-clraddr\n    ldr r3, [r0, #12] ; r3-setaddr\n    \n    cpsid i ; disable irq\n    \n    b .start\n    \n.nextbit:               ;            C0\n    str r1, [r3, #0]    ; pin := hi  C2\n    tst r6, r0          ;            C3\n    bne .islate         ;            C4\n    str r1, [r2, #0]    ; pin := lo  C6\n.islate:\n    lsrs r6, r6, #1     ; r6 >>= 1   C7\n    bne .justbit        ;            C8\n    \n    ; not just a bit - need new byte\n    adds r4, #1         ; r4++       C9\n    subs r5, #1         ; r5--       C10\n    bcc .stop           ; if (r5<0) goto .stop  C11\n.start:\n    movs r6, #0x80      ; reset mask C12\n    nop                 ;            C13\n\n.common:               ;             C13\n    str r1, [r2, #0]   ; pin := lo   C15\n    ; always re-load byte - it just fits with the cycles better this way\n    ldrb r0, [r4, #0]  ; r0 := *r4   C17\n    b .nextbit         ;             C20\n\n.justbit: ; C10\n    ; no nops, branch taken is already 3 cycles\n    b .common ; C13\n\n.stop:    \n    str r1, [r2, #0]   ; pin := lo\n    cpsie i            ; enable irq\n\n    pop {r4,r5,r6,r7,pc}\n\n\n","test.ts":"// tests go here; this will not be compiled when this package is used as a library\n"}